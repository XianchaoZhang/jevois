/*! \page ProStatus JeVois-Pro 开发状态

更新时间：2021 年 9 月 9 日

Legend
------

- 已实现、测试并运行：\image{inline} html checkmark.png
- 尚未实现或无法运行：\image{inline} html crossmark.png


目前发展状况 
--------------------------

Feature                                                                               | Status | Notes
--------------------------------------------------------------------------------------|:------:|------
\jvth{Hardware Design}                                                                | -      | -
All 19 internal power supplies operational from single 12-24 VDC input                | \jvok  | -
4x A73 big cores running at full speed with no errors under full load                 | \jvok  | -
2x A53 little cores running at full speed with no errors under full load              | \jvok  | -
4GB LPDDR4 working with no error at full DDR4-3200 speed                              | \jvok  | -
ARM NEON accelerated multimedia processor instructions tested and working             | \jvok  | -
A311D MALI GPU OpenGL-ES 3.2 working using ARM demos (framebuffer mode)               | \jvok  | -
Micro-SD / TF card working at SDR104 (104 MBytes/s) speed                             | \jvok  | -
HDMI output, video + sound                                                            | \jvok  | -
2x USB 2.0 type-A ports at top of camera provide power and are working                | \jvok  | -
Mini-USB 2.0 OTG port working, both in host and in device modes                       | \jvok  | -
4-pin micro-serial port working                                                       | \jvok  | -
6-pin AUX power port working (outputs 5V, 3.3V, 1.8V for accessories)                 | \jvok  | -
8-pin GPIO port working (configurable as SPI+I2C, or general GPIO)                    | \jvok  | (12)
Thermally stable operation under full load                                            | \jvok  | -
Camera sensor connector working, camera functionality                                 | \jvok  | -
Camera sensor connector working, dual-camera functionality                            | ?      | (10)
Camera sensor connector working, SPI inertial measurement unit (IMU) functionality    | \jvok  | -
M.2 E-Key connector working with PCIe M.2 cards (Coral TPU, Wifi cards)               | \jvok  | -
M.2 E-Key connector working with USB/SDIO M.2 cards (Wifi/bluetooth cards)            | \jvok  | -
Wired ethernet using add-on USB-to-RJ45 converter                                     | \jvok  | -
Variable-speed cooling fan control                                                    | \jvok  | -
\jvth{Base System}                                                                    | -      | -
Bootloader, Linux Kernel 4.9.x, partitions, Ubuntu 20.04                              | \jvok  | -
Custom kernel device tree                                                             | \jvok  | -
Boot to X-windows and use as a regular computer when connecting keyboard/mouse        | \jvok  | -
Play Youtube videos with sound over HDMI                                              | \jvok  | -
Boot to console                                                                       | \jvok  | -
Boot to JeVois software                                                               | \jvok  | -
JeVois-Pro video + serial + storage over mini-USB OTG, kernel Gadget driver           | \jvno  | (13)
JeVois-Pro control via JeVois Inventor                                                | \jvno  | (14)
Software reset                                                                        | \jvok  | -
\jvth{Camera Sensor}                                                                  | -      | -
Sony IMX-290 2MP camera sensor detection and basic 1080p @ 30fps operation            | \jvok  | -
Sony IMX-290 use 4x MIPI-CSI lanes for lowest latency                                 | \jvok  | -
Sony IMX-290 hardware-accelerated conversion from Bayer to YUYV, RGB, RGBA, GREY      | \jvok  | -
Sony IMX-290 support for basic controls (brightness, exposure, gain, etc)             | \jvok  | -
Sony IMX-290 frame cropping support, any size from native 1080p                       | \jvok  | (11)
Sony IMX-290 ISP-based hardware-accelerated frame scaling support, any size           | \jvok  | (11)
Sony IMX-290 ISP-based dual-stream capture, e.g., YUYV 1920x1080 + RGB 512x288        | \jvok  | -
Sony IMX-290 native 720p support                                                      | \jvno  | (1)
Sony IMX-290 frame rate control                                                       | \jvno  | (2)
\jvth{IMU Sensor}                                                                     | -      | -
TDK ICM-29048 inertial measurement uint (IMU) detection over 7MHz SPI bus             | \jvok  | -
TDK ICM-29048 IMU basic operation, accel, gyro, compass, temperature over 7MHz SPI    | \jvok  | -
TDK ICM-29048 IMU upload digital motion processor (DMP) code                          | \jvok  | -
TDK ICM-29048 IMU run digital motion processor (DMP) code                             | \jvno  | (3)
\jvth{Machine Vision Base Software}                                                   | -      | -
OpenCV 4.5.3 + OpenVino 2021.4 + all OpenCV-Contrib + Python3 bindings                | \jvok  | -
OpenGL-ES 3.2 framebuffer                                                             | \jvok  | -
OpenCL 1.2                                                                            | \jvok  | -
Python 3.8 + numpy + scipy + any aarch64 python packages                              | \jvok  | -
TensorFlow Lite 2.5                                                                   | \jvok  | -
Mediapipe 0.8 python                                                                  | \jvok  | -
Vulkan, hardware H.265 encode/decode, etc                                             | ?      | (4)
\jvth{JeVois Base Software}                                                           | -      | -
JeVois use OpenGL for 1080p display @ 30fps over HDMI                                 | \jvok  | -
JeVois OpenGL support for zero-copy video display using DMABUF, EGLImageKHR           | \jvok  | -
JeVois OpenGL DMABUF, EGLImageKHR support for RGB, RGBA, YUYV, GREY direct display    | \jvok  | -
JeVois OpenGL support for DMABUF display of YUYV, RGB, RGBA, GREY from camera         | \jvok  | -
JeVois OpenGL support for display of processed YUYV, RGB, RGBA, GREY using shaders    | \jvok  | (7)
JeVois capture fullsize+scaled streams from camera, display fullsize, process scaled  | \jvok  | -
JeVois new on-screen graphical user interface using Dear ImGui 1.83                   | \jvok  | -
JeVois new ImGui backend for MALI OpenGL-ES GPU in framebuffer mode                   | \jvok  | -
JeVois new drivers to capture console keyboard/mouse events and pass to ImGui         | \jvok  | -
JeVois run OpenCV machine vision algorithms written in C++                            | \jvok  | -
JeVois run other machine vision algorithms written in C++                             | \jvok  | -
JeVois run OpenCV machine vision algorithms written in Python                         | \jvok  | -
JeVois run other machine vision algorithms written in Python                          | \jvok  | -
JeVois support for Python modules to draw OpenGL overlays (box, text, etc)            | \jvok  | -
JeVois-Pro run machine vision algorithms developed for JeVois-A33, C++ and Python     | \jvok  | -
JeVois-Pro enhance some JeVois-A33 algorithms to use DMABUF zero-copy + OpenGL        | \jvok  | -
JeVois new dual threadpool with user-selectable big/little affinity                   | \jvok  | -
JeVois new async_big() and async_little() thread launching functions                  | \jvok  | -
\jvth{JeVois New DNN Software}                                                        | -      | -
New JeVois deep neural network (DNN) framework                                        | \jvok  | -
JeVois DNN framework support for classification, detection, semantic segmentation     | \jvok  | -
JeVois DNN framework hierarchical model zoo with 30+ pre-trained models               | \jvok  | -
JeVois DNN framework download and run custom models                                   | \jvok  | -
JeVois DNN run models on CPU using OpenCV DNN module                                  | \jvok  | -
JeVois DNN run models on A311D 5-TOPS integrated neural processing uint (NPU)         | \jvok  | -
JeVois custom kernel driver to enable Coral 4-TOPS accelerator over PCIe-2.1 (5 Gbps) | \jvok  | -
JeVois DNN run models on Coral 4-TOPS accelerator, PCIe-2.1 (5 Gbps) M.2 card         | \jvok  | -
JeVois DNN run models on Coral 4-TOPS accelerator, USB-2.0 (480 Mbps) dongle          | \jvok  | -
JeVois DNN run models on Myriad-X 1-TOPS accelerator with OpenVino, PCIe-2.1 M.2 card | \jvok  | -
JeVois DNN run models on Myriad-X 1-TOPS accelerator with OpenVino, USB-2.0 dongle    | \jvok  | -
JeVois DNN run models on CPU, A311D NPU, Coral TPU, Myriad-X VPU in parallel          | \jvok  | -
JeVois DNN run multiple models on one CPU, NPU, TPU, VPU hardware, time multiplexed   | \jvok  | -
Support for Coral M.2 board with 2xTPU chips using 2xPCIe lanes, made by Google       | \jvno  | (5)
Support for custom JeVois 2xTPU board with 1 TPU on PCIe and the other on USB         | \jvok  | -
Support for custom JeVois 2xTPU + eMMC board with PCIe hub + 2 TPUs on PCIe           | \jvok  | -

注意：
------

1. 使用 IMX-290 数据表的 720p 设置时，ARM ISP 硬件报告帧冲突。可能是 ISP 与以 720p 运行的传感器之间的硬件不兼容，或 ARM 的 ISP 内核驱动程序存在错误。仍然可以以 1080p 捕获并使用硬件加速重新缩放到 720p。

2. 需要在 V4L2 的 ARM ISP 内核驱动程序中添加对 VIDIOC_S_PARM 和 VIDIOC_G_PARM 的支持。当前帧速率由所选的 IMX290 操作模式和传感器设置决定（默认 1080p @ 30fps）。

3. 可能是我们的原型板上存在电压转换问题，也可能是软件问题。A311D 芯片可能太弱，无法以 7MHz SPI 速度驱动基于电阻的分压器。我们正在使用有源电压转换器芯片对传感器板进行硬件修订。对于早期原型，假设 DMP 无法运行。

4. 这些功能已被证明可以在使用 A311D 芯片的其他开发板上工作，因此它们应该可以工作，可能在安装了必要的驱动程序和其他软件之后。

5. A331D 仅有 1x PCIe 通道。请注意，如果您使用 Coral 团队开发和销售的 Coral 双 TPU 板，您将只能访问 JeVois 上的一个 TPU。我们设计了一个双 TPU 板，使用 PCIe 交换机将两个 TPU 连接到 A311D 的 1x PCIe 总线。该板工作得很好。

7. 着色器中的一些混叠问题似乎只存在于 A311D 上，而不存在于我们的桌面 GPU 上，这要求处理后的图像以整数缩放因子显示，这可能是由于 A311D OpenGL-ES 处理器的精度低于桌面完整 OpenGL。例如，如果将 640x480 YUYV 处理输出缩放以适应全屏高度（从 640x480 到 1440x1080 像素，缩放因子 2.25），则将显示混叠伪影，但如果按因子 2（1280x960）缩放，则显示正常。这只会影响“旧式”JeVois 机器视觉模块，这些模块使用基于像素的绘图函数将处理结果绘制到输入图像的副本中，从而创建新的输出图像。 JeVois-Pro 上首选的新处理方式是使用零拷贝 DMABUF 简单地显示从相机捕获的 1080p 原始图像，然后让机器视觉模块在其上绘制 ImGui/OpenGL 覆盖层，让 OpenGL 渲染图像和覆盖层（可能带有 alpha 混合）。在这种情况下，不存在混叠问题。

10. 双摄像头传感器所需的信号已布线但尚未测试，因为我们还没有双传感器原型板。双摄像头传感器板可以使用 2 个独立的 MIPI-CSI 时钟，每个传感器最多可以使用 2 个 MIPI 通道。单摄像头传感器板（例如默认的 Sony IMX290 板）使用一个 MIPI-CSI 时钟和最多 4 个 MIPI 通道。

11. 支持将摄像机画面裁剪或缩放到任意大小，但OpenGL、OpenCV 等通常要求图像宽度和高度为 32 的倍数。

12. 参见 \ref ProConnectors

13. 由于 JeVois-Pro 具有 HDMI 输出，因此像我们在 JeVois-A33 上所做的那样模拟 USB 网络摄像头就没那么有趣了。在算法开发过程中，您只需将 JeVois-Pro 直接连接到显示器、键盘和鼠标，JeVois-Pro 具有完整的图形用户界面，可让您调整参数、运行各种机器视觉模块、编辑 Python 代码等。对于算法完成后的无头操作，请使用 4 针微型串行端口将机器视觉结果输出为文本字符串（例如，“在 X、Y 处检测到面部”，或“QRcode 解码值为 Z”，等等）。

14. JeVois-Inventor 是一款桌面应用程序，可用于控制没有显示器或键盘/鼠标的 JeVois-A33 智能相机。由于 JeVois-Pro 有显示器和键盘/鼠标，因此 JeVois-Inventor 的功能已转换为可直接在 JeVois-Pro 中运行的完整图形用户界面，从而完全不再需要主机。

*/

