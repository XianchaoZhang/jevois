/*! \page MicroSD MicroSD 卡组织和文件


MicroSD 卡的组织方式 
===================================

JeVois 智能相机中的 MicroSD 卡包含智能相机处理器上运行的所有软件。其中包括：

- 启动和配置低级硬件元素所需的文件，例如 DDR3 内存和 microSD 卡驱动程序以及 Linux 内核。

- Linux 操作系统，包括标准 Linux 命令行实用程序，以及许多库，如 OpenCV、boost、Eigen3 等。

- JeVois 机器视觉模块和数据。

在桌面或笔记本电脑上使用 MicroSD 卡 
================================================================

修改 MicroSD 卡的内容（例如添加新的机器视觉模块或获取 JeVois 录制的视频文件）可以通过将 MicroSD 卡从 JeVois 智能相机中取出并将其连接到台式机或笔记本电脑来实现。

\warning 您的 JeVois 智能相机具有 \b push-push MicroSD 卡槽。将卡推入直至卡入卡槽发出咔嗒声以装入卡槽，然后再次推入直至卡入卡槽并弹出以卸载卡槽。您是否尝试将 MicroSD 卡拉出，否则可能会损坏 JeVois 智能相机的 MicroSD 卡槽。


JeVois-A33 MicroSD 
------------------

\jvimg{microsd-insert.png, 50%}

JeVois-Pro MicroSD 
------------------

\jvimg{jvp-sd.png, 30%}

在计算机上使用 MicroSD 卡 
--------------------------------------

在台式机或笔记本电脑上访问 MicroSD 卡有两种基本方法：

- 使用大多数计算机商店出售的 USB 读卡器，并将其连接到台式机或笔记本电脑的 USB 端口

\image html microsd-usb.jpg

- 使用 Micro-SD 至 SD 卡适配器，并将 SD 卡插入计算机（如果计算机有插槽）（例如 Mac 笔记本电脑）：

\image html microsd-sd.jpg

\image html microsd-sdmac.jpg


MicroSD 分区和分区类型 
=========================================

该卡分为三个分区（逻辑卷）：

- \b BOOT（DOS/Windows FAT32 格式）：包含启动所需的文件，包括 Linux 内核

- \b LINUX（Linux ext4 格式，在 Windows 和 Mac 电脑上读取 MicroSD 卡时可能不会显示）：包含 Linux 操作系统和程序

- \b JEVOIS（DOS/Windows FAT32 格式）：包含所有 JeVois 机器视觉模块和数据文件，包括智能相机可能创建的文件（例如，将视频保存到 microSD 时）。


由于 LINUX 分区的类型为 ext4，这是 Linux 的原生文件系统，但在 Windows 和 Mac 上默认无法识别，因此当您在 Windows 或 Mac 计算机上读取 MicroSD 卡时，您可能无法看到或访问它。这通常不是问题，因为只有高级黑客（将在 Linux 计算机上编程）才需要修改 LINUX 分区的内容。

对于普通用户，您需要的只是 JEVOIS 分区，如下所述。

以下是插入 MicroSD 卡后 Mac 笔记本电脑上发生的情况的示例：出现两个卷，BOOT 和 JEVOIS，可以浏览这两个卷中的文件。LINUX 卷未出现在这台 Mac 上（但请注意，第三方应用程序也可用于允许 Mac 读取 ext4 分区）。

\warning MicroSD 卡还具有额外的和必要的 "files" ，这些文件直接存储在卡上的特定扇区（物理闪存盘位置）上。这些是引导加载程序（系统启动）文件，是 JeVois 嵌入式处理器启动时加载的第一个文件。由于处理器在早期启动阶段还不知道分区、文件系统等，因此它所知道的全部操作就是从 SD 卡读取原始扇区。您通常不需要修改这些特殊文件。但请注意，如果您想将一张 JeVois MicroSD 卡的内容复制到新卡，则需要进行完整的物理逐扇区复制。有关如何执行此操作的说明，请参阅 \ref NewMicroSD。

\image html microsd-mac.png

MicroSD 卡内容 
=======================

以下是典型的 \jva33 microSD 卡上的文件简图树（\jvpro 类似但不完全相同）：



\verbatim
├── BOOT  ########## (16 MB FAT32 partition)
│   ├── README.txt               # information file for Windows users who may not see the JEVOIS partition
│   ├── script.bin               # low-level hardware configuration file
│   ├── uEnv.txt                 # optional command-line arguments for the Linux Kernel
│   └── uImage                   # Linux kernel


├── LINUX ########## (1 GB Linux ext4 partition)
│   ├── bin                      ### Directory for standard Unix commands
│   │   ├── ash                  # some Unix command
│   │   ├── bash                 # some other Unix command
│   │   ├── busybox              # ...
│   │   ├── cat

...

│   ├── etc                      ### Directory for Unix configuration files
│   │   ├── fstab
│   │   ├── group
│   │   ├── hostname
│   │   ├── hosts

...

│   ├── lib                      ### Directory for Unix system libraries
│   │   ├── ld-2.23.so
│   │   ├── ld-linux-armhf.so.3
│   │   ├── libatomic.so.1.2.0
│   │   ├── libc-2.23.so
│   │   ├── libcrypt-2.23.so
│   │   ├── libc.so.6
│   │   ├── libdl-2.23.so
│   │   ├── libgcc_s.so
│   │   ├── libm-2.23.so
│   │   ├── libm.so.6
│   │   ├── libnsl-2.23.so

...

│   ├── sbin                     ### Directory for system administration Unix commands
│   │   ├── arp
│   │   ├── blkid
│   │   ├── devmem
│   │   ├── fdisk
│   │   ├── freeramdisk
│   │   ├── fsck

...

│   ├── tmp                      ### Scratch directory for temporary files
│   ├── usr                      ### Directory for user Unix commands and shared data
│   │   ├── bin
│   │   │   ├── ar
│   │   │   ├── attr
│   │   │   ├── awk
│   │   │   ├── basename
│   │   │   ├── bunzip2
│   │   │   ├── bzcat

...

│   │   ├── lib                  ### Directory for Unix user libraries
│   │   │   ├── libattr.so.1.1.0
│   │   │   ├── libavcodec.so.56.60.100
│   │   │   ├── libavdevice.so.56.4.100
│   │   │   ├── libavfilter.so.5.40.101
│   │   │   ├── libavformat.so.56.40.101
│   │   │   ├── libavheap.so
│   │   │   ├── libavresample.so.2.1.0
│   │   │   ├── libavutil.so.54.31.100
│   │   │   ├── libbfd-2.25.51.so
│   │   │   ├── libbfd-2.26.1.so
│   │   │   ├── libblas.so
│   │   │   ├── libboost_atomic.so.1.61.0
│   │   │   ├── libboost_chrono.so.1.61.0
│   │   │   ├── libboost_container.so.1.61.0

...

│   │   ├── sbin
│   │   │   ├── addgroup         ### Directory for more Unix system administration commands
│   │   │   ├── adduser
│   │   │   ├── arping
│   │   │   ├── chroot

...

│   │   └── share                ### Directory for shared data used by Unix commands
│   │       ├── awk
│   │       │   ├── assert.awk
│   │       │   ├── bits2str.awk
│   │       │   ├── cliff_rand.awk
│   │       │   ├── ctime.awk
│   │       │   ├── ftrans.awk
│   │       │   ├── getopt.awk
│   │       │   ├── gettime.awk

...
│   └── var                      ### Directory for Unix system log files and other volatile files
│       ├── cache
│       ├── lib
│       │   └── misc
│       ├── lock
│       ├── log
│       ├── run
│       ├── spool
│       └── tmp



├── JEVOIS ########## (6+ GB FAT32 partition)
│   ├── config                   ### Directory for JeVois engine configuration file
│   │   ├── initscript.cfg
│   │   ├── JeVois.cmake
│   │   ├── jevois_config.cmake
│   │   ├── params.cfg
│   │   └── videomappings.cfg
│   ├── data                     ### Directory for optional user data, some JeVois modules also save outputs into it
│   ├── lib                      ### Directory for JeVois libraries, i.e., collections of shared vision algorithms
│   │   └── JeVois               # One sub-directory for each JeVois "Vendor" (provider of JeVois modules)
│   │       └── libjevoisbase.so.1.0
│   ├── modules                  ### Directory for JeVois machine vision modules
│   │   └── JeVois               # One sub-directory for each JeVois "Vendor" (provider of JeVois modules)
│   │       ├── Convert          # One directory for each module
│   │       │   ├── Convert.so   # The compiled module code that will be loaded when that module is selected
│   │       │   ├── icon.png     # Extra data about the module
│   │       │   ├── modinfo.html
│   │       │   ├── modinfo.yaml
│   │       │   └── screenshot1.png
│   │       ├── DemoArUco
│   │       │   ├── calibration.yaml
│   │       │   ├── DemoArUco.so
│   │       │   ├── icon.png
│   │       │   ├── modinfo.html
│   │       │   ├── modinfo.yaml
│   │       │   ├── screenshot1.png
│   │       │   └── screenshot2.png
│   │       ├── DemoGPU
│   │       │   ├── DemoGPU.so
│   │       │   ├── icon.png
│   │       │   ├── modinfo.html
│   │       │   ├── modinfo.yaml
│   │       │   ├── screenshot1.png
│   │       │   ├── shaders      # This module uses auxiliary files for GPU shader code
│   │       │   │   ├── blurfragshader.glsl
│   │       │   │   ├── dilatefragshader.glsl
│   │       │   │   ├── erodefragshader.glsl
│   │       │   │   ├── medianfragshader.glsl
│   │       │   │   ├── multfragshader.glsl
│   │       │   │   ├── simplefragshader.glsl
│   │       │   │   ├── simplevertshader.glsl
│   │       │   │   ├── sobelfragshader.glsl
│   │       │   │   ├── threshfragshader.glsl
│   │       │   │   ├── twirlfragshader.glsl
│   │       │   │   └── yuvfragshader.glsl
│   │       │   └── video1.mkv

...

│   │       ├── DemoSalGistFaceObj
│   │       │   ├── DemoSalGistFaceObj.so
│   │       │   ├── facedetector
│   │       │   │   ├── haarcascade_eye_tree_eyeglasses.xml
│   │       │   │   └── haarcascade_frontalface_alt.xml
│   │       │   ├── icon.png
│   │       │   ├── modinfo.html
│   │       │   ├── modinfo.yaml
│   │       │   ├── movie.avi
│   │       │   ├── screenshot1.png
│   │       │   └── tiny-dnn     # 该模块使用神经网络数据的辅助文件 
│   │       │       ├── CIFAR10
│   │       │       │   ├── batches.meta.txt
│   │       │       │   ├── data_batch_1.bin
│   │       │       │   ├── data_batch_2.bin
│   │       │       │   ├── data_batch_3.bin
│   │       │       │   ├── data_batch_4.bin
│   │       │       │   ├── data_batch_5.bin
│   │       │       │   ├── readme.html
│   │       │       │   ├── test_batch.bin
│   │       │       │   └── weights.tnn
│   │       │       └── MNIST
│   │       │           ├── t10k-images.idx3-ubyte
│   │       │           ├── t10k-labels.idx1-ubyte
│   │       │           ├── train-images.idx3-ubyte
│   │       │           ├── train-labels.idx1-ubyte
│   │       │           └── weights.tnn

...

│   │       ├── SaliencySURF
│   │       │   ├── icon.png
│   │       │   ├── images       # Images of the things this module can recognize
│   │       │   │   ├── books.png
│   │       │   │   ├── doorframe.png
│   │       │   │   ├── doorlock2.png
│   │       │   │   ├── doorlock.png
│   │       │   │   ├── lightswitch2.png
│   │       │   │   ├── lightswitch.png
│   │       │   │   ├── spot25.png
│   │       │   │   ├── spot26.png
│   │       │   │   └── usbbatt.png
│   │       │   ├── modinfo.html
│   │       │   ├── modinfo.yaml
│   │       │   ├── params.cfg
│   │       │   ├── SaliencySURF.so
│   │       │   └── screenshot1.png

...

│   ├── packages                 ### Simply copy downloaded .jvpkg files here and JeVois will unpack and install them
│   └── scripts
│       ├── astylerc
│       ├── docinstall.sh
│       ├── extract-code-snippets.pl
│       ├── jevois-modinfo.pl
│       └── list-sources.sh

...

\endverbatim

MicroSD 分区大小调整 
============================

如果您的卡大于我们提供的图像尺寸，您可能需要调整 JEVOIS 或 JEVOISPRO 分区的大小以使用卡上所有可用的空间。

JEVOIS 或 JEVOISPRO 分区使用 VFAT/FAT32 文件系统，以实现与各种主机的最大兼容性。要在 Linux 下调整其大小，请使用 `gparted` （您可能必须先使用 `sudo apt install gparted` 安装它）。


JeVois-A33：在 JeVois 运行时访问和修改 MicroSD 
==============================================================================

\jva33 \jvversion{1.1}

当卡位于 JeVois 智能相机内时，您可以访问 microSD 上 \b JEVOIS 分区的内容。JeVois 可以（根据需要）使 \b JEVOIS 分区作为虚拟 USB 闪存驱动器通过 USB 向连接的主机计算机显示。

要启用此功能，请连接到 JeVois 命令行界面（参见 \ref UserCli）并发出命令：

\verbatim
usbsd
\endverbatim

您会注意到主机检测到了一个新的 USB 闪存驱动器。

\image html usbsd.png

\note 由于能够在更改 microSD 内容的同时切换各种视觉模块会带来一些潜在的数据一致性问题，因此目前，我们已限制通过 USB 的文件访问，仅在不流式传输视频时才有效。同样，需要重新启动 JeVois 相机才能允许它使用主机上的任何新文件或修改过的文件。

在 Linux 上，使用 \jvversion{1.2} 及更高版本，您可以使用主机命令 `jevois-usbsd start` 指示连接的 JeVois 相机开始导出其 microSD，而无需打开串行终端应用程序并连接到 JeVois。同样，您可以发出 `jevois-usbsd stop` 来释放卡并重新启动 JeVois。

典型的工作流程如下：

- 将 JeVois 连接到主机并让其启动。

- 确保您没有从 JeVois 捕获视频。

- 连接到 JeVois 命令行界面（使用硬件串行端口或 USB 串行；参见 \ref UserCli）。

- 当你想修改 JeVois 内部 microSD 的内容时，请发出 \c usbsd 命令。虚拟 USB 闪存驱动器将出现在主机上。

- 使用 \jvversion{1.3} 及更高版本，您不需要打开串行终端并在其中输入，而是可以直接从任何 Linux shell 使用新的主机命令 `jevois-usbsd start` 。

- 添加/修改/删除文件。这包括：
  + 修改 \b JEVOIS:/config 中的配置或参数文件
  + 编辑 \b JEVOIS:/modules 下用 Python 编写的模块
  + 添加任何数据，例如 ObjectDetect 模块的训练图像
  + 检索任何数据，例如 JeVois 录制的视频文件
  + 将使用 `./rebuild-platform.sh` 编译的新 C++ 模块的 .jvpkg 包复制到 JEVOIS:/packages/

- 完成后，正确弹出虚拟 USB 驱动器（拖到垃圾箱、单击弹出按钮等）。JeVois 将检测到此情况并自动重新启动，然后可以使用新文件或修改后的文件。您应该在 JeVois LED 上看到以下内容：
  + 闪烁 - 关机完成
  + 常亮绿色 - 重新启动
  + 橙色闪烁 - 检测到摄像头传感器
  + 常亮橙色：准备就绪

*/

