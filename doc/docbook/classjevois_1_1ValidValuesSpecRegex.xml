<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classjevois_1_1ValidValuesSpecRegex">
<title>jevois::ValidValuesSpecRegex&lt; T &gt; Class Template Reference</title>
<indexterm><primary>jevois::ValidValuesSpecRegex&lt; T &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;jevois/Component/ValidValuesSpec.H&gt;</computeroutput>
</para>
<section>
<title> </title>
<simplesect><title>template&lt;typename T&gt;
class jevois::ValidValuesSpecRegex&lt; T &gt;</title></simplesect>


<para>基于正则表达式的有效值规范，与正则表达式匹配的所有内容均被视为有效 </para>



<para>在内部使用 boost::regex（因为 std::regex 不允许从正则表达式中获取原始字符串规范，但我们需要它来显示帮助消息）。 这允许高度灵活的有效值定义。例如，假设您希望 int 参数在范围 [0..59] 内，但它也可以具有值 72，则您的正则表达式 将是：</para>

<para><literallayout><computeroutput>^(([0-5]?[0-9])|72)$
</computeroutput></literallayout></para>

<para>您可以在网络上找到正则表达式示例来匹配有效文件名、有效 URL、有效信用卡号等。只需确保您的正则表达式符合 boost::regex 所期望的语法，因为正则表达式有几种语法。 </para>
<para>
Definition at line 171 of file ValidValuesSpec.H.</para>
Inheritance diagram for jevois::ValidValuesSpecRegex&lt; T &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classjevois_1_1ValidValuesSpecRegex__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for jevois::ValidValuesSpecRegex&lt; T &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classjevois_1_1ValidValuesSpecRegex__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classjevois_1_1ValidValuesSpecRegex_1a3aa314788bb15c21f3dd777dd528cd21">ValidValuesSpecRegex</link> ()=delete</para>

<para>没有默认构造函数，始终需要提供正则表达式 </para>
</listitem>
            <listitem><para><link linkend="_classjevois_1_1ValidValuesSpecRegex_1a0f590351e35519a9b67f6e27fb3ab502">ValidValuesSpecRegex</link> (boost::regex const &amp;valid_regex)</para>

<para>从指定有效值的给定正则表达式构造 </para>
</listitem>
            <listitem><para>virtual <link linkend="_classjevois_1_1ValidValuesSpecRegex_1ac4dbd9b12c1ea20fb562913d6b5e61c0">~ValidValuesSpecRegex</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_classjevois_1_1ValidValuesSpecRegex_1a888360c78deb6d25850ff0ad790aee2b">checkValueValidity</link> (T const &amp;val) const</para>

<para>检查提议的值是否有效，当且仅当值与我们的正则表达式匹配时返回 true </para>
</listitem>
            <listitem><para>virtual const std::string <link linkend="_classjevois_1_1ValidValuesSpecRegex_1adc27085c6f685943d9521714313854a9">str</link> () const</para>

<para>转换为可读字符串 </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>const boost::regex <link linkend="_classjevois_1_1ValidValuesSpecRegex_1ae616006ac3c632c1dec9b8035a273e52">itsValidRegex</link></para>

<para>定义有效值的正则表达式 </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classjevois_1_1ValidValuesSpecRegex_1a3aa314788bb15c21f3dd777dd528cd21"/>    <section>
    <title>ValidValuesSpecRegex()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ValidValuesSpecRegex</primary><secondary>jevois::ValidValuesSpecRegex&lt; T &gt;</secondary></indexterm>
<indexterm><primary>jevois::ValidValuesSpecRegex&lt; T &gt;</primary><secondary>ValidValuesSpecRegex</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classjevois_1_1ValidValuesSpecRegex">jevois::ValidValuesSpecRegex</link>&lt; T &gt;::<link linkend="_classjevois_1_1ValidValuesSpecRegex">ValidValuesSpecRegex</link> ( )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>没有默认构造函数，始终需要提供正则表达式 </para>
</para>
    </section><anchor xml:id="_classjevois_1_1ValidValuesSpecRegex_1a0f590351e35519a9b67f6e27fb3ab502"/>    <section>
    <title>ValidValuesSpecRegex()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ValidValuesSpecRegex</primary><secondary>jevois::ValidValuesSpecRegex&lt; T &gt;</secondary></indexterm>
<indexterm><primary>jevois::ValidValuesSpecRegex&lt; T &gt;</primary><secondary>ValidValuesSpecRegex</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classjevois_1_1ValidValuesSpecRegex">jevois::ValidValuesSpecRegex</link>&lt; T &gt;::<link linkend="_classjevois_1_1ValidValuesSpecRegex">ValidValuesSpecRegex</link> (boost::regex const &amp; valid_regex)<computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>从指定有效值的给定正则表达式构造 </para>
</para>
    </section><anchor xml:id="_classjevois_1_1ValidValuesSpecRegex_1ac4dbd9b12c1ea20fb562913d6b5e61c0"/>    <section>
    <title>~ValidValuesSpecRegex()</title>
<indexterm><primary>~ValidValuesSpecRegex</primary><secondary>jevois::ValidValuesSpecRegex&lt; T &gt;</secondary></indexterm>
<indexterm><primary>jevois::ValidValuesSpecRegex&lt; T &gt;</primary><secondary>~ValidValuesSpecRegex</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>virtual <link linkend="_classjevois_1_1ValidValuesSpecRegex">jevois::ValidValuesSpecRegex</link>&lt; T &gt;::~<link linkend="_classjevois_1_1ValidValuesSpecRegex">ValidValuesSpecRegex</link> ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classjevois_1_1ValidValuesSpecRegex_1a888360c78deb6d25850ff0ad790aee2b"/>    <section>
    <title>checkValueValidity()</title>
<indexterm><primary>checkValueValidity</primary><secondary>jevois::ValidValuesSpecRegex&lt; T &gt;</secondary></indexterm>
<indexterm><primary>jevois::ValidValuesSpecRegex&lt; T &gt;</primary><secondary>checkValueValidity</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>virtual bool <link linkend="_classjevois_1_1ValidValuesSpecRegex">jevois::ValidValuesSpecRegex</link>&lt; T &gt;::checkValueValidity (T const &amp; val) const<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>检查提议的值是否有效，当且仅当值与我们的正则表达式匹配时返回 true </para>
</para>
<para>
Implements <link linkend="_classjevois_1_1ValidValuesSpecBase_1ac1198c7ddd9c246cc9f6e68b0c20b4f9">jevois::ValidValuesSpecBase&lt; T &gt;</link>.</para>
    </section><anchor xml:id="_classjevois_1_1ValidValuesSpecRegex_1adc27085c6f685943d9521714313854a9"/>    <section>
    <title>str()</title>
<indexterm><primary>str</primary><secondary>jevois::ValidValuesSpecRegex&lt; T &gt;</secondary></indexterm>
<indexterm><primary>jevois::ValidValuesSpecRegex&lt; T &gt;</primary><secondary>str</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>virtual const std::string <link linkend="_classjevois_1_1ValidValuesSpecRegex">jevois::ValidValuesSpecRegex</link>&lt; T &gt;::str ( ) const<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>转换为可读字符串 </para>
</para>
<para>
Implements <link linkend="_classjevois_1_1ValidValuesSpecBase_1ac354706e1ae5638204584d660b0b6f47">jevois::ValidValuesSpecBase&lt; T &gt;</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classjevois_1_1ValidValuesSpecRegex_1ae616006ac3c632c1dec9b8035a273e52"/>    <section>
    <title>itsValidRegex</title>
<indexterm><primary>itsValidRegex</primary><secondary>jevois::ValidValuesSpecRegex&lt; T &gt;</secondary></indexterm>
<indexterm><primary>jevois::ValidValuesSpecRegex&lt; T &gt;</primary><secondary>itsValidRegex</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const boost::regex <link linkend="_classjevois_1_1ValidValuesSpecRegex">jevois::ValidValuesSpecRegex</link>&lt; T &gt;::itsValidRegex<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>定义有效值的正则表达式 </para>
</para>
<para>
Definition at line 191 of file ValidValuesSpec.H.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/jevois/Component/<link linkend="_ValidValuesSpec_8H">ValidValuesSpec.H</link></section>
</section>
