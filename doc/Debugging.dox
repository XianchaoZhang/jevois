/*! \page Debugging 调试 JeVois 软件


在主机上调试 
==================

在 JeVois 上调试新的机器视觉模块的最简单方法是首先在您的桌面（主机）计算机上编译并运行它们（参见 \ref CompilingJeVois 和 \ref CompilingJeVoisBase ）。

当您在主机上运行 \b jevois-daemon （参见 \ref JeVoisDaemon ）时，错误消息将打印在您启动它的终端窗口中。

您还可以在 \b gdb （GNU 调试器）中运行 \b jevois-daemon 并查看它可能在哪里崩溃。

有时，由于我们在 JeVois 中使用了大量线程，因此运行效果不佳。您可以改为通过启用 coredump、运行 jevois-daemon 直到其崩溃，然后使用 gdb 检查 core 文件来进行离线调试。有关详细信息，请参阅 \ref JeVoisDaemon 。

调试编译器和链接器错误 
------------------------------------

编译错误报告得相当详细。但链接器错误更难调试。如果您最终收到有关缺少库的错误消息，则查看哪个链接器命令被准确调用以及其中指定的所有路径很有用，以检查库丢失的原因。

CMake 允许您通过指定 `VERBOSE=1` 作为 make 选项切换到详细模式。因此，如果您收到缺少库的错误，那么

\verbatim
cd hbuild/ # or pbuild/, phbuild/, etc
make VERBOSE=1
\endverbatim

这将向您显示已运行的链接器命令。然后您可以查看所有 `-L...` 参数并检查 CMakeList.txt 以了解未找到库的原因。

启用调试级别消息 
-----------------------------

您可以在编译 jevois 时打开 CMake 标志 \c JEVOIS_LDEBUG_ENABLE 和 \c JEVOIS_TRACE_ENABLE 以启用超详细调试消息（请参阅 \ref CompilingJeVois ）。请注意，这些标志仅允许编译这些消息。要查看它们，您还需要在运行时将参数 \c loglevel 设置为 \c debug （请参阅 \ref UserCli ）。

如果您更改这些标志，则必须重新编译所有内容（重新编译 jevois、jevoisbase、您的模块等）。

JeVois-Pro：在平台硬件上调试
==============================================

\jvpro 最简单的调试工作流程可能是：

- 按照 \ref ProUserQuick 中的说明切换到控制台启动
- 启用核心转储并运行 `jevoispro.sh`，然后使用 `gdb` 查找错误，按照 \ref JeVoisDaemon 中的说明

JeVois-A33：调试平台硬件上的启动过程
=============================================================

如果您正在修改 JeVois 智能相机硬件上的低级软件，并且在启动时遇到困难，您可以启用启动消息。这要求您在启动期间连接到 JeVois 4 针硬件串行端口，因为启动消息将发送到该串行端口。这对于解决任何启动问题非常有用，甚至可以在智能相机启动时进入登录提示符而不是自动启动 \b jevois-daemon。


这需要您将 JeVois 相机的 4 针串行端口连接到终端。您可以使用：

- USB 转串口电缆或 dongle（也称为 FTDI 电缆或 USBISP dongle 等）。然后按照 \ref UserSerial 中所示进行连接，并使用 \b screen 、\b HyperTerminal 等与其通信（请参阅 \ref UserCli ，但将其中的 \b ttyACM0 替换为 \b ttyUSB0 或将 USB 转串口适配器插入主机时由 \b dmesg 命令创建和报告的任何设备）。

- Arduino 或其他微控制器

- 任何其他提供 TTL 级串行终端的设备


然后你可以：

- 编辑 microSD 上的 \b BOOT:uEnv.txt ，以启用向串行端口发送详细启动消息

- 创建一个空文件 \b BOOT:login ，JeVois 相机启动时会检测到该文件。如果该文件存在，\b jevois-daemon 将不会自动启动，而是会在串行控制台上收到登录提示。用户名是 \b root ，没有密码。登录后，您可以通过运行 <b>/usr/bin/jevois.sh</b> 手动启动 JeVois 软件，就像它会自动启动一样。

- 如果您出于某种原因不想启动 USB 串行功能，请创建一个空文件 \b BOOT:nousbserial 。

- 如果您希望在 4 针硬件串行端口而不是 JeVois 控制台上获取登录提示，请 \jvversion{1.1} 创建一个空文件 \b BOOT:serialtty 。

- 如果您希望在串行 USB 端口而不是 JeVois 控制台上获取登录提示，请创建一个空文件 \b BOOT:usbserialtty 。如果 \b BOOT:nousbserial 也存在，则无效。

- 如果您出于某种原因不想启用 microSD-over-USB 功能，请 \jvversion{1.1} 创建一个空文件 \b BOOT:nousbsd 。

- \jvversion{1.1} 如果您希望在启动时自动通过 USB 导出 microSD JEVOIS 分区，请创建一个空文件 \b BOOT:usbsdauto 。请注意，这将强制 JEVOIS 分区在设备端为只读（并且它将在主机上可读写），即 JeVois 处理器将无法 1) 编译 python 模块，2) 将任何视频文件或其他数据写入 microSD。

- \jvversion{1.7.2} 创建一个空文件 \b BOOT:multicam 以降低 JeVois 请求的 USB 带宽。这将允许您将最多 3 个 JeVois 相机连接到单个 USB 端口（通过集线器）。默认情况下，JeVois 请求所有可用的 USB 同步带宽，以最大限度地减少主机图像捕获和图像接收之间的延迟。有关更多详细信息，请参阅 \ref Multicam 。

- \jvversion{1.8.0} 创建一个空文件 \b BOOT:quietcmd ，以禁止在命令行上收到每个成功命令后向用户发送 'OK'。仅推荐高级用户使用。

- \jvversion{1.8.0} 创建一个空文件 \b BOOT:nopython 禁用对用 python 编写的模块的支持。激活后，尝试加载 python 模块将引发异常。禁用 python 可节省大量内存，在使用运行大型深度神经网络的 C++ 模块时可能很有用。

- 编辑文件 <b>~/jevois/bin/jevois.sh</b>，该文件将作为 <b>LINUX:/usr/bin/jevois.sh</b> 安装到 microSD，例如在 \b gdb 中启动 \b jevois-daemon （参见 \ref JeVoisDaemon ）。

\image html jevois-boot.png 通过 4 针串行端口显示详细的启动消息和登录提示


另请查看此视频（有些旧了，现在看起来可能有点不同）：

\youtube{ul_IsomUJ4I}

*/

