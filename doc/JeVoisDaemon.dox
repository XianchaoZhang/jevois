/*! \page JeVoisDaemon jevois-daemon 可执行文件

\note 为了便于阅读，我们下面只使用 \b jevois-daemon ，但在使用 \jvpro 时，应将其替换为 \b jevoispro-daemon

编译 JeVois 框架时创建的主要可执行文件是 \jva33 上的 \b jevois-daemon 或 \jvpro 上的 \b jevoispro-daemon ，它基本上实现了 jevois::Engine，它将协调从摄像头传感器到机器视觉处理再到 USB 上的视频流的数据流。

\note \c jevois-deamon 可以在主机上运行（当为主机编译 jevois 时），在这种情况下，所有机器视觉算法都将在主机上运行。在此模式下，您通常会使用常规 USB 摄像头，或者您可能希望使用仅配置了直通视频映射的 JeVois 智能摄像头（这样 JeVois 摄像头就不会自行进行任何处理）。请参阅 \ref UserModes 和 [PassThrough 模块](http://jevois.org/moddoc/PassThrough/modinfo.html)。在 JeVois 摄像头处于直通模式的情况下在主机上运行 jevois-daemon 通常有助于收集 JeVois 摄像头看到的训练数据（例如，稍后要识别的物体图片）。

\note \c jevois-daemon 还可在 JeVois 智能相机硬件上运行，只要插入并启动即可。在这种情况下，智能相机硬件将执行所有机器视觉处理。在此模式下操作时，通常您不会希望在主机上再次运行 jevois-daemon，因为这相当于连续运行 jevois-daemon 两次。一个例外是如上所述的训练数据收集。相反，您通常希望在主机上运行普通的视频查看器，例如 guvcview，或者您开发的一些自定义机器视觉代码，它将从 JeVois 相机抓取视频帧，然后在主机上进一步处理它们。

在主机上运行 jevois-daemon 
==============================

要在主机上运行它，请为主机安装 jevois 和 jevoisbase deb 包（请参阅 \ref ProgrammerSource ）。或者从 GitHub 获取源代码并重新编译（请参阅 \ref CompilingJeVois 和 \ref CompilingJeVoisBase ），然后在 jevois 和 jevoisbase 中运行 \c rebuild-host.sh 。

然后插入任意 USB 摄像头，并输入

\verbatim
jevois-daemon
\endverbatim

您应该会在窗口中看到桌面上处理过的来自网络摄像头的视频。请注意，JeVois 核心软件不提供任何模块，因此请确保在尝试使用 jevois-daemon 之前继续编译和安装 jevoisbase。

\b jevois-daemon 接受许多命令行参数，请尝试

\verbatim
jevois-daemon --help
\endverbatim

才能看到它们。请注意，jevois-daemon 启动后，其中一些将会消失，例如 \c cameradev 指定要使用的相机（或视频输入文件）。一旦 jevois-daemon 运行，该参数就无法再更改。

一旦 \c jevois-daemon 运行，您就可以通过在启动 jevois-daemon 的终端中键入命令来与 JeVois 系统交互。例如，尝试：

\verbatim
info
help
listmappings
\endverbatim

要以特定模式启动 jevois-daemon，请在 listmapping 列表中找到其编号，然后键入 'quit' 退出 jevois-daemon，最后

\verbatim
jevois-daemon --videomapping=19
\endverbatim

使用新的视频映射重新启动它（此处，根据列表映射，映射 19 用于演示二维码）。有关命令的更多信息，请参阅 \ref UserCli ，有关与 jevoisbase 中的默认模块集合相对应的视频映射列表，请参阅 http://jevois.org/start/start.html。

\note 如果您的 USB 网络摄像头无法支持给定视频映射所需的摄像头分辨率，那么您将收到错误，并且该映射无法在主机上运行。

jevois-daemon 选项 
=======================

在撰写本文时， \c jevois-daemon \c --help 返回（在此重现主要是为了帮助人们通过关键字搜索此文档）：

\verbatim
General Options:  
  --tracelevel (unsigned int) default=[0]
    Set the minimum trace level to display

  --loglevel (jevois::manager::LogLevel) default=[info] List:[fatal|error|info]
    Set the minimum log level to display

  --help (bool) default=[false]
    Print this help message


Engine Options:  
  --usbserialdev (string) default=[]
    Over-the-USB serial device name, or empty

  --cameradev (string) default=[/dev/video0]
    Camera device name (if starting with /dev/v...), or movie file name (e.g., movie.mpg) or image sequence (e.g., im%02d.jpg, to read frames im00.jpg, im01.jpg, etc).

  --cameranbuf (unsigned int) default=[0]
    Number of video input (camera) buffers, or 0 for automatic.

  --serout (jevois::engine::SerPort) default=[None] List:[None|All|Hard|USB]
    Send module serial messages to selected serial port(s)

  --cpumax (unsigned int) default=[1344] List:[120|240|312|408|480|504|600|648|720|816|912|1008|1044|1056|1080|1104|1116|1152|1200|1224|1248|1296|1344]
    CPU maximum frequency in MHz

  --videomapping (int) default=[-1]
    Index of Video Mapping to use, or -1 to use the default mapping

  --camreg (bool) default=[false]
    Enable raw access to camera registers through setcamreg and getcamreg

  --cpumode (jevois::engine::CPUmode) default=[Performance] List:[PowerSave|Conservative|OnDemand|Interactive|Performance]
    CPU frequency modulation mode

  --gadgetdev (string) default=[]
    Gadget device name. This is used on platform hardware only. On host hardware, a display window will be used unless gadgetdev is None (useful for benchmarking) or is a file stem for a movie file that does not start with /dev/ (and which should contain a printf-style directive for a single int argument, the movie number).

  --camturbo (bool) default=[false]
    Enable camera turbo mode by relaxing the need for DMA-coherent video buffer memory. This can accelerate severalfolds access to the captured image data, but it may also yield stripe artifacts with some modules, such as PassThrough. The stripes are pieces of incorrect data in the cache. You should experiment with each particular module. Turbo mode is not recommended for any production-grade application.

  --gadgetnbuf (unsigned int) default=[0]
    Number of video output (USB video) buffers, or 0 for auto

  --serlog (jevois::engine::SerPort) default=[None] List:[None|All|Hard|USB]
    Show log and debug messages on selected serial port(s)

  --serialdev (string) default=[stdio]
    Hardware (4-pin connector) serial device name, or 'stdio' to use the console, or empty for no hardware serial port

\endverbatim


jevois-daemon 配置文件 
============================

\note 对于 \jvpro，将下面的 \b /jevois/ 替换为 \b /jevoispro/

jevois-daemon 使用多个配置文件，源位于 <b>jevois/Config/</b> 并且它们安装到主机上的 <b>/jevois/config/</b> 和平台 microSD 上的 <b>JEVOIS:/jevois/config/</b> 中。

- \b videomappings.cfg 可用视频映射列表，请参阅 \ref UserModes

- \b params.cfg 启动时设置的参数，这相当于从命令行指定这些参数

- \b initscript.cfg 在启动时运行的脚本，您可以在此文件中放入任何有效的命令，就像您以交互方式输入它们一样，有关更多信息，请参阅 \ref UserCli 。

在 JeVois-A33 平台上运行 jevois-daemon 
===============================================

\c jevois-daemon 在平台上自动启动。启动它的脚本安装在 microSD 上的 <b>LINUX:/usr/bin/jevois.sh</b> 中。它的源代码位于 <b>jevois/bin/jevois.sh</b> 中，并作为 rebuild-platform.sh 过程的一部分安装到 microSD 暂存区。

您可以编辑此脚本，例如，如果您希望在 \c gdb 调试器中运行 jevois-daemon，只需替换该行

\verbatim
/usr/bin/jevois-daemon ${opts}
\endverbatim

by

\verbatim
gdb --args /usr/bin/jevois-daemon ${opts}
\endverbatim

请注意，自从 \jvversion{1.1} 添加了 Python 支持后，\c jevois-daemon 启动时会引入 libcrypto，这会导致平台上的 gdb 出现问题。因此，当 gdb 在平台上启动时，发出

\verbatim
handle SIGILL nostop noprint
\endverbatim

在向 gdb 发出 \c run 命令之前。请参阅 https://www.raspberrypi.org/forums/viewtopic.php?p=155085 以了解 Raspberry Pi 上报告的相同问题。

您可以启用核心转储，正常运行 jevois-daemon 直到它崩溃，然后使用 gdb 在核心文件中查找错误，而不是在 gdb 中运行（有时它会在处理许多线程等时遇到困难）：

\verbatim
ulimit -c unlimited # enable core dumps
jevois.sh # get to the part that crashes and it will quit, dumping a file named 'core'
gdb /usr/bin/jevois-daemon core
# press return a few times until you get a prompt
bt # to show the backtrace leading to the crash
quit
\endverbatim


在 JeVois-Pro 平台上运行 jevois-daemon 
===============================================

\c jevoispro-daemon 在平台上自动启动。启动它的脚本安装在 microSD 上的 <b>LINUX:/usr/bin/jevoispro.sh</b> 中。它的源代码位于 <b>jevois/bin/jevoispro.sh</b> 中，并作为 \b jevois 包的 rebuild-platform-pdeb.sh 过程的一部分安装到 microSD 中。

要调试硬崩溃，请按以下步骤操作：启动控制台，启用核心转储，正常运行 jevoispro-daemon 直到它崩溃，然后使用 gdb 在核心文件中查找错误：

首先，按照 \ref ProUserQuick 中的说明切换到控制台启动

然后重新启动并以 root / jevois 身份登录，然后：

\verbatim
ulimit -c unlimited # enable core dumps
jevoispro.sh # get to the part that crashes and it will quit, dumping a file named 'core'
gdb /usr/bin/jevoispro-daemon core
# press return a few times until you get a prompt
bt # to show the backtrace leading to the crash
quit
\endverbatim


*/


