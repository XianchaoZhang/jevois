/*! \page CompilingJeVois Compiling JeVois core software from source

JeVois core software is in a repository called \b jevois and located at https://github.com/jevois

Compiling JeVois core software from source is only supported on Ubuntu Linux (version 16.10 amd64 recommended).

Before you attempt to compile JeVois, you should go through the [INSTALL
instructions](https://github.com/jevois/jevois/blob/master/INSTALL) at least once. As part of this, you will download
all JeVois core software and all necessary Ubuntu packages.

Theory
------

The JeVois core software is written in C++-17. It provides code for video capture from a camera sensor, video output to
a USB link, serial communications, basic low-level image processing functions, support for creating more advanced
machine vision algorithms from collections of components with runtime-tunable parameters, and support for
loading/unloading machine vision modules at runtime.

The JeVois core software is configured and compiled using [CMake](https://cmake.org).

It can be compiled natively on your Linux computer (\b host mode), in which case video will be captured from any
connected camera, and video output will be to your computer's display. It can also be cross-compiled for the CPU inside
the JeVois smart camera (\b platform mode), in which case video will be captured from the video sensor inside the
JeVois camera, and video output will be streamed over the USB link.

Getting the source code from GitHub
-----------------------------------

\verbatim
cd
git clone https://github.com/jevois/jevois.git
\endverbatim

We also strongly recommend that you get the other JeVois source code repositories from GitHub:

\verbatim
git clone https://github.com/jevois/jevoisbase.git
git clone https://github.com/jevois/samplemodule.git
git clone https://github.com/jevois/samplepythonmodule.git
git clone https://github.com/jevois/jevois-tutorials.git
\endverbatim

and, for \jva33:
\verbatim
git clone https://github.com/jevois/jevois-sdk.git
\endverbatim

or, for \jvpro:
\verbatim
git clone https://github.com/jevois/jevoispro-sdk.git
\endverbatim

SDK needed to cross-compile code
--------------------------------

To compile jevois, jevoisbase, samplemodule, etc for host, you can just proceed to the next section.

To cross-compile these for platform, you first need the JeVois SDK installed. The easiest is to install \b
jevois-sdk-dev or \b jevoispro-sdk-dev debian files, as detailed in \ref ProgrammerSource

JeVois-A33: Full reconfiguration and compilation
------------------------------------------------

Scripts are provided to recompile everything:

- \c rebuild-host.sh will
  + Compile natively for your computer's CPU
  + Object files will be in \b hbuild/ which the script creates
  + Executables will be installed to \b /usr/bin
  + Include files to be used by module developers will be installed in \b /usr/include/jevois
  + JeVois config files will be installed in \b /jevois (to match their location on the platform hardware). This
    is also where you should install machine vision modules for JeVois.
  + Thus, all files and executables are ready to use immediately on your computer.

- \c rebuild-platform.sh will
  + Cross-compile for the ARM CPU inside the JeVois smart camera
  + Object files will be in \b pbuild/ which the script creates
  + Config files used by JeVois at runtime will be staged into <b>/var/lib/jevois-microsd/config/</b> and will later
    be installed into <b>/jevois/config/</b> on the actual microSD card.
  + Executables including \c jevois-daemon will be staged into <b>/var/lib/jevois-build/usr/bin/</b> and will later
    be installed into <b>/usr/bin/</b> on the actual microSD card.
  + Include files will be staged into <b>/var/lib/jevois-build/usr/include/jevois/</b> and will later be installed into
    <b>/usr/include/jevois/</b> on the actual microSD card.
  + The core JeVois library (\b libjevois.so) will be staged into <b>/var/lib/jevois-build/usr/lib/</b> and will later
    be installed into <b>/usr/lib/</b> on the actual microSD card.
  + Documentation files are staged into <b>/var/lib/jevois-build/usr/share/doc/jevois-platform/</b> and will be
    installed into <b>/usr/share/doc/jevois-platform/</b> on the actual microSD card.
  + Thus, because all target files are stored into the staging area, they will be ready to be flashed to
    microSD that can then be inserted into your JeVois smart camera.

The main executable that is created is \c jevois-daemon, which basically implements a JeVois Engine that will
orchestrate the flow of data from camera sensor to machine vision processing to video streaming over USB. See
\ref JeVoisDaemon for more info.

JeVois-Pro: Full reconfiguration and compilation
------------------------------------------------

Scripts are provided to recompile everything:

- \c rebuild-pro-host.sh will
  + Compile natively for your computer's CPU
  + Object files will be in \b phbuild/ which the script creates
  + Executables will be installed to \b /usr/bin
  + Include files to be used by module developers will be installed in \b /usr/include/jevois
  + JeVois config files will be installed in \b /jevoispro and this
    is also where machine vision modules and shared data for JeVois-Pro will be installed later.
  + Thus, all files and executables are ready to use immediately on your computer.

- \c rebuild-pro-platform-pdeb.sh will
  + Cross-compile for the ARM CPU inside the JeVois-Pro smart camera
  + Object files will be in \b ppdbuild/ which the script creates
  + A deb package will be created that should be installed on the camera while logged on the camera.
  + File locations are the same as above for host.

The main executable that is created is \c jevoispro-daemon, which basically implements a JeVois Engine that will
orchestrate the flow of data from camera sensor to machine vision processing to video display over HDMI. See
\ref JeVoisDaemon for more info.

Partial re-compilation
----------------------

The scripts \c rebuild-host.sh, \c rebuild-platform.sh, etc clear and recompile everything.

You should run them at least once.

Then, if you are just changing a few files, you can only recompile what is needed, as follows:

- \jva33: for host
\verbatim
cd hbuild
make -j
sudo make install
make doc     # optional; if desired
\endverbatim

- \jva33: for platform
\verbatim
cd pbuild
make -j
sudo make install
\endverbatim

- \jvpro: for host
\verbatim
cd phbuild
make -j
sudo make install
make doc     # optional; if desired
\endverbatim

- \jvpro: for platform
\verbatim
cd ppdbuild
make -j
sudo make install
sudo cpack # will re-generate the deb package into ppdbuild/jevoispro-platform_XXX.deb
# You can then copy this file to microSD, switch JeVois-Pro to console boot, then
# `apt remove jevoispro-platform` to nuke the existing version and then `dpkg -i <your_new_deb>`.
\endverbatim

\note When you `apt remove jevoispro-platform` it will also remove jevoisprobase-platform. So make sure you have
compiled it and packed it as a deb ready to install, using the instructions at \ref CompilingJeVoisBase

Advanced configuration flags
----------------------------

The scripts \c rebuild-host.sh, \c rebuild-platform.sh, etc pass down any command-line arguments to cmake. Available
flags include (see CMakeLists.txt in jevois/ for the latest):

- \b -DJEVOIS_LDEBUG_ENABLE=ON Enable debug-level messages. Those are turned off by default so that they do not use any
  CPU and do not slow down operations. Turning them on is useful for low-level debugging. Beware that some sections of
  the USB streaming code are time-critical and may fail (i.e., give USB errors) when LDEBUG is enabled. Note that This
  just enables LDEBUG statements to be compiled. To see them at runtime, you also need to set the \p loglevel parameter
  to debug level, see UserCli for info about the \p loglevel parameter.

- \b -DJEVOIS_TRACE_ENABLE=ON Enable function tracing, which will issue a message (at the LDEBUG level) each time a
  particular function is entered, and another when it is exited. Functions that you want to trace need to have a
  JEVOIS_TRACE(level) statement in them. Because trace messages are at the LDEBUG level, if LDEBUG is not enabled (see
  above), trace messages will not be seen.

- \b -DJEVOIS_USE_SYNC_LOG=ON Uses synchronous logging, i.e., we wait until each log message is printed out before
  continuing execution. This interferes with time-critical code sections, such as anything related to USB
  streaming. Hence, by default, logging in JeVois is asynchronous, messages are just pushed into a queue without waiting
  for them to be printed out, and a separate thread then prints them out. This asynchronous logging eliminates most
  slowdown due to logging, but it may be confusing when debugging things that interact with the Linux system or kernel,
  as the order in which JeVois messages versus syslog messages will appear may not reflect the true ordering of what
  happened.

- \b -DJEVOIS_LOG_TO_FILE=ON Enable sending all log messages to file jevois.log instead of console. Only works with
  async logging.

*/

