/*! \page CompilingJeVois 从源代码编译 JeVois 核心软件

JeVois 核心软件位于名为 \b jevois 的存储库中，位于 https://github.com/jevois

仅 Ubuntu Linux（建议使用 20.04（1.20.0）/24.04（1.21.0） amd64 版本）支持从源代码编译 JeVois 核心软件。

在尝试编译 JeVois 之前，您应该至少阅读一次 [INSTALL 说明](https://github.com/jevois/jevois/blob/master/INSTALL)。作为此过程的一部分，您将下载所有 JeVois 核心软件和所有必要的 Ubuntu 软件包。

理论  
----- 

JeVois 核心软件是用 C++-17 编写的。它提供从摄像头传感器捕获视频、将视频输出到 USB 链路、串行通信、基本低级图像处理功能的代码，支持从具有运行时可调参数的组件集合创建更高级的机器视觉算法，以及支持在运行时加载/卸载机器视觉模块。

JeVois 核心软件使用 [CMake](https://cmake.org) 配置和编译。

它可以在您的 Linux 计算机上本地编译（\b host 模式），在这种情况下，视频将从任何连接的摄像头捕获，视频输出将发送到您的计算机显示器。它还可以为 JeVois 智能摄像头内的 CPU 进行交叉编译（\b platform 模式），在这种情况下，视频将从 JeVois 摄像头内的视频传感器捕获，视频输出将通过 USB 链路进行流式传输。

从 GitHub 获取源代码 
-----------------------------------

\verbatim
cd
git clone https://github.com/jevois/jevois.git
\endverbatim

我们还强烈建议您从 GitHub 获取其他 JeVois 源代码存储库：

\verbatim
git clone https://github.com/jevois/jevoisbase.git
git clone https://github.com/jevois/samplemodule.git
git clone https://github.com/jevois/samplepythonmodule.git
git clone https://github.com/jevois/jevois-tutorials.git
\endverbatim

对于 \jva33：
\verbatim
git clone https://github.com/jevois/jevois-sdk.git
\endverbatim

or, for \jvpro:
\verbatim
git clone https://github.com/jevois/jevoispro-sdk.git
\endverbatim

交叉编译代码所需的 SDK 
--------------------------------

要为主机编译 jevois、jevoisbase、samplemodule 等，您只需继续下一部分即可。

要为平台交叉编译这些，首先需要安装 JeVois SDK，因为它将提供交叉编译所需的 ARM 库。最简单的方法是安装 \b jevois-sdk-dev 或 \b jevoispro-sdk-dev debian  文件，详情请参阅 \ref ProgrammerSource

JeVois-A33：完全重新配置和编译
------------------------------------------------

有两种方法可以为 \jva33 编译软件：

- \b host： 在您的 amd64 桌面上本地编译，以便在该 amd64 桌面上执行。在开发期间使用此功能，因为它允许您在桌面上编译代码，然后立即使用常规网络摄像头对其进行测试。当然，某些模块在桌面上不起作用，例如如果它们使用 ARM 特定的 NEON 指令。但总的来说，这是开发和调试新机器视觉模块的最快方法。

- \b platform： 在您的桌面上交叉编译适用于 ARM 目标处理器的代码，这是 \jva33 中使用的架构。交叉编译的文件将存储在暂存区（\b /var/lib/jevois-build 和 \b /var/lib/jevois-microsd ）中，然后可以将其刷入 microSD。

提供了脚本来重新编译所有内容：

- \c rebuild-host.sh 将
  + 为您计算机的 CPU 进行本地编译
  + 目标文件将位于脚本创建的 \b hbuild/ 中
  + 可执行文件将安装到 \b /usr/bin
  + 模块开发人员使用的包含文件将安装在 \b /usr/include/jevois 中
  + JeVois 配置文件将安装在 \b /jevois 中（以匹配其在平台硬件上的位置）。这也是您应该为 JeVois 安装机器视觉模块的地方。
  + 因此，所有文件和可执行文件都可以立即在您的计算机上使用。

- \c rebuild-platform.sh 将
  + 为 JeVois 智能相机内的 ARM CPU 进行交叉编译
  + 目标文件将位于脚本创建的 \b pbuild/ 中
  + JeVois 在运行时使用的配置文件将暂存到 <b>/var/lib/jevois-microsd/config/</b> 中，稍后将安装到实际 microSD 卡上的 <b>/jevois/config/</b> 中。
  + 包括 \c jevois-daemon 在内的可执行文件将暂存到 <b>/var/lib/jevois-build/usr/bin/</b> 中，稍后将安装到实际 microSD 卡上的 <b>/usr/bin/</b> 中。
  + 包含文件将暂存到 <b>/var/lib/jevois-build/usr/include/jevois/</b> 中，稍后将安装到实际 microSD 卡上的 <b>/usr/include/jevois/</b> 中。
  + 核心 JeVois 库 (\b libjevois.so) 将暂存到 <b>/var/lib/jevois-build/usr/lib/</b> 中，稍后将安装到实际 microSD 卡上的 <b>/usr/lib/</b> 中。
  + 文档文件将暂存到 <b>/var/lib/jevois-build/usr/share/doc/jevois-platform/</b> 中，稍后将安装到实际 microSD 卡上的 <b>/usr/share/doc/jevois-platform/</b> 中。
  + 因此，由于所有目标文件都存储在暂存区中，它们将准备好被闪存到 microSD，然后可以将其插入到您的 JeVois 智能相机中。

创建的主要可执行文件是 \c jevois-daemon，它基本上实现了 JeVois 引擎，它将协调从相机传感器到机器视觉处理再到 USB 视频流的数据流。有关更多信息，请参阅 \ref JeVoisDaemon。

JeVois-Pro：完全重新配置和编译 
------------------------------------------------

有三种方法可以为 \jvpro 编译软件：

- \b host：在您的 amd64 桌面上本地编译，以便在该 amd64 桌面上执行。在开发期间使用此功能，因为它允许您在桌面上编译代码，然后立即使用常规网络摄像头对其进行测试。当然，某些模块在桌面上不起作用，例如如果它们使用 NPU。但总的来说，这是开发和调试新机器视觉模块的最快方法。

- \b platform：在您的桌面上交叉编译 arm64 目标处理器的代码，这是 \jvpro 中使用的架构。通常，如果您想要将 \a 支持文件放置在暂存区（\b /var/lib/jevoispro-build 和 \b /var/lib/jevoispro-microsd），则只需运行此操作，然后在编译需要链接或以其他方式使用这些文件的其他模块时可以引用这些文件。

- \b platform-pdeb：在您的桌面上交叉编译 \jvpro 的 arm64 目标处理器代码，并创建一个 \a 原生 arm64 deb 包，您稍后可以将其复制到 microSD 并安装在 \jvpro 上。通常，您会在主机模式下测试和调试新的机器视觉模块后执行此操作，现在您已准备好在 \jvpro 相机上试用它。

提供了脚本来重新编译所有内容：

- \c rebuild-pro-host.sh 将
  + 为您计算机的 CPU 进行本地编译
  + 目标文件将位于脚本创建的 \b phbuild/ 中
  + 可执行文件将安装到 \b /usr/bin
  + 模块开发人员要使用的包含文件将安装在 \b /usr/include/jevois 中
  + JeVois 配置文件将安装在 \b /jevoispro 中，这也是稍后安装机器视觉模块和 JeVois-Pro 共享数据的地方。
  + 因此，所有文件和可执行文件都可以立即在您的计算机上使用。

- \c rebuild-pro-platform.sh 将
  + 为 JeVois-Pro 智能相机内的 ARM CPU 进行交叉编译
  + 目标文件将位于脚本创建的 \b ppbuild/ 中
  + JeVois 在运行时使用的配置文件将暂存到 <b>/var/lib/jevoispro-microsd/config/</b>
  + 包括 \c jevois-daemon 的可执行文件将暂存到 <b>/var/lib/jevoispro-build/usr/bin/</b>
  + 包含文件将暂存到 <b>/var/lib/jevoispro-build/usr/include/jevois/</b>
  + 核心 JeVois 库 (\b libjevoispro.so) 将暂存到 <b>/var/lib/jevoispro-build/usr/lib/</b>
  + 文档文件将暂存到<b>/var/lib/jevoispro-build/usr/share/doc/jevoispro-platform/</b>
  + 因此，由于所有目标文件都存储在暂存区中，因此当您尝试编译 jevoisbase 或新的自定义机器视觉模块时，它们将可以用作依赖项。

- \c rebuild-pro-platform-pdeb.sh 将
  + 为 JeVois-Pro 智能相机内的 ARM CPU 进行交叉编译
  + 目标文件将位于脚本创建的 \b ppdbuild/ 中
  + 将创建一个 deb 包，该包应在登录相机时安装在相机上。
  + 文件位置与上述主机相同。

创建的主要可执行文件是 \c jevoispro-daemon，它基本上实现了 JeVois 引擎，该引擎将协调从相机传感器到机器视觉处理再到 HDMI 视频显示的数据流。有关更多信息，请参阅 \ref JeVoisDaemon。

下面是从 \jvpro 源代码编译 jevois 和 jevoisbase 时应该看到的内容的演示：

\youtube{TnQW0gMJzTo}


部分重新编译 
----------------------

脚本 \c rebuild-host.sh、\c rebuild-platform.sh 等会清除并重新编译所有内容。这需要一段时间。

您应该至少运行它们一次。

然后，如果您只是更改几个文件，那么您只需重新编译所需的文件即可，如下所示：

- \jva33: for host
\verbatim
cd hbuild
make -j
sudo make install
make doc     # optional; if desired
\endverbatim

- \jva33: for platform
\verbatim
cd pbuild
make -j
sudo make install
\endverbatim

- \jvpro: for host
\verbatim
cd phbuild
make -j
sudo make install
make doc     # optional; if desired
\endverbatim

- \jvpro: for platform \a support files
\verbatim
cd ppbuild
make -j
sudo make install
\endverbatim

- \jvpro: for platform \a native deb
\verbatim
cd ppdbuild
make -j
sudo make install
sudo cpack # 将使用 arm64 arch 将 deb 包重新生成为 ppdbuild/jevoispro-platform_XXX_arm64.deb。
# 然后，您可以将此文件复制到 microSD，将 JeVois-Pro 切换到控制台启动，然后
# `apt remove jevoispro-platform` 删除现有版本，然后 `dpkg -i <your_new_deb>`。
\endverbatim


\note 当您 `apt remove jevoispro-platform` 时，它也会删除 jevoisprobase-platform。因此，请确保您已编译它并将其打包为可安装的 deb，使用 \ref CompilingJeVoisBase 中的说明

高级配置标志 
----------------------------

脚本 \c rebuild-host.sh, \c rebuild-platform.sh  等将所有命令行参数传递给 cmake。可用标志包括（请参阅 jevois/ 中的 CMakeLists.txt 了解最新信息）：

- \b -DJEVOIS_LDEBUG_ENABLE=ON 启用调试级别消息。默认情况下，这些消息处于关闭状态，因此它们不会使用任何 CPU 并且不会减慢操作速度。打开它们对于低级调试很有用。请注意，USB 流式传输代码的某些部分对时间至关重要，并且在启用 LDEBUG 时可能会失败（即给出 USB 错误）。请注意，这只会启用 LDEBUG 语句进行编译。要在运行时查看它们，您还需要将 \p loglevel 参数设置为调试级别，有关 \p loglevel 参数的信息，请参阅 UserCli。

- \b -DJEVOIS_TRACE_ENABLE=ON 启用函数跟踪，每次进入特定函数时都会发出一条消息（在 LDEBUG 级别），退出时会发出另一条消息。要跟踪的函数需要在其中包含 JEVOIS_TRACE(level) 语句。由于跟踪消息处于 LDEBUG 级别，因此如果未启用 LDEBUG（参见上文），则不会看到跟踪消息。

- \b -DJEVOIS_USE_SYNC_LOG=ON 使用同步日志记录，即，我们等到每条日志消息都打印出来后再继续执行。这会干扰时间关键的代码部分，例如与 USB 流相关的任何内容。因此，默认情况下，JeVois 中的日志记录是异步的，消息只是被推送到队列中而不等待它们被打印出来，然后由单独的线程将它们打印出来。这种异步日志记录消除了由于日志记录而导致的大部分减速，但在调试与 Linux 系统或内核交互的东西时可能会造成混淆，因为 JeVois 消息与 syslog 消息出现的顺序可能无法反映发生事件的真实顺序。

- \b -DJEVOIS_LOG_TO_FILE=ON 启用将所有日志消息发送到文件 jevois.log 而不是控制台。仅适用于异步日志记录。

*/

