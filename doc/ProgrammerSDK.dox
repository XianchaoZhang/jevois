/*! \page ProgrammerSDK Programmer SDK and writing new modules

The JeVois programmer software development kit (SDK) allows you to create your own machine vision modules for
JeVois. The SDK is a complex beast as it not only comprises the JeVois core software, but also a custom Linux kernel for
your JeVois camera, and the full Linux operating system and set of utilities that run inside the JeVois camera.

Getting started with the JeVois Programmer SDK
==============================================

To get started with the programmer SDK, follow the instructions in the [INSTALL file of the jevois
repository](https://github.com/jevois/jevois/blob/master/INSTALL).

Writing new modules: A single standalone module
===============================================

Take a look at the samplemodule directory you installed as part of installing the SDK. It is a template for a new
module. Here are quick steps on how to use it to get started with your own new module:

\verbatim

# Make your own copy:
cp -r samplemodule myalgo

# Pick a class name for your module, say MyAlgo, then rename the .C file of the module:
cd myalgo/src/Modules
mv SampleModule MyAlgo
mv MyAlgo/SampleModule.C MyAlgo/MyAlgo.C

# Rename the class inside the module's .C file:
sed -i s/SampleModule/MyAlgo/g MyAlgo/MyAlgo.C

cd ../..

# Choose your vendor name and put it in CMakeLists.txt
emacs CMakeLists.txt  # Change the value of JEVOIS_VENDOR from SampleVendor to your name (no spaces or special chars)
\endverbatim

A script \c jevois-create-module has been created in \b /usr/bin (source in \b ~/jevois/scripts/) to automate
this process:

\verbatim
# USAGE: jevois-create-module <VendorName> <ModuleName>
# Creates a project directory with name tolower(ModuleName) and populates it:

jevois-create-module MyVendor MyAlgo

# Module is setup in myalgo/
\endverbatim

Now edit your module to actually do something interesting, and update all the custom doxygen tags in the inline doc of
the module, such as @@videomapping, and so on (see below for more info on custom doxygen tags).

Also check out \b icon.png and other files in the directory where the source code is, and update them as appropriate.

You can then compile using

\verbatim
./rebuild-host.sh
./rebuild-platform.sh
\endverbatim

as you did with jevois and jevoisbase when installing the SDK.

Note that \c rebuild-platform.sh compiles your module and then installs everything under a directory named myalgo/jvpkg

\note If you get an error <b>cc1plus: fatal error: jevois/Config/Config.H: No such file or directory</b>, just run
\c rebuild-platform.sh in your \b jevois repository.

Adding your module to a microSD card: live microSD card
-------------------------------------------------------

Insert a properly installed JeVois MicroSD (follow the steps at [JeVois Start](http://jevois.org/start) to make one from
a disk image) into your computer, either physically inserted into your host computer using a microSD-to-USB adapter, or
exported live by JeVois using the \c usbsd command in the JeVois command-line interface). The microSD card must be be
available under <b>/media/<em>username</em>/JEVOIS/</b> where <em>username</em> is your Linux user name.

Run:

\verbatim
./rebuild-platform.sh --microsd
\endverbatim

Modules, config files, etc will be installed to the live microSD card at <b>/media/<em>username</em>/JEVOIS/</b> where
<em>username</em> is your Linux user name.

\note Once you select a destination in `rebuild-platform.sh` (none, staging, or microsd), that will remain for
subsequent `make install` commands, until you change it by re-running `rebuild-platform.sh` with another destination.

Here is a simple command to export the microSD of a live JeVois camera without having to start a terminal program, etc
(make sure JeVois is not streaming video):

\verbatim
sudo sh -c 'echo usbsd > /dev/ttyACM0'
\endverbatim

With \jvversion{1.2} and later, you can just instead type `jevois-usbsd start` to start exporting the microSD, and
`jevois-usbsd stop` to eject it and restart JeVois.

With \jvversion{1.3} and later, you do not need to manually take out or even manually export the microSD inside JeVois
anymore. A new build option `--live` can do it automatically. Just connect JeVois and allow it to start, then type:

\verbatim
./rebuild-platform.sh --live
\endverbatim

which will:

- cross-compile the module for platform
- issue a `jevois-usbsd start` to instruct JeVois to export its microSD as a virtual flash drive
- install the cross-compiled module to the microSD inside JeVois
- issue a `jevois-usbsd stop` to eject the virtual flash drive and restart JeVois.

Adding your module to a microSD card: jvpkg
-------------------------------------------

This approach is useful if you also want to share your module with friends. You can just send them your jvpkg file.

Once you have all the compiled and auxiliary files (icon.png, etc) in myalgo/jvpkg, you are ready to pack it:

\verbatim
cd pbuild
make jvpkg
\endverbatim

This creates a file

\verbatim
myalgo/MyVendor_MyAlgo.jvpkg
\endverbatim

Insert a properly installed JeVois MicroSD (follow the steps at [JeVois Start](http://jevois.org/start) to make one from
a disk image) into your computer, and copy the .jvpkg file into the JEVOIS:/packages/ directory of your microSD.

Your smart camera will unpack, configure, and delete the .jvpkg file next time it starts up.

Make sure you allow enough time for it to do that work. It may take several minutes (depending on your module's file
size, microSD card speed, etc).

Remember to also edit config/videomappings.cfg in the JEVOIS partition of your microSD to add a new mapping that will
use your module.

For more information:

- jvpkg packages are created by `/usr/bin/jevois-jvpkg` (source in `~/jevois/scripts/jevois-jvpkg)`, which is
  invoked by `make jvpkg`
- and they are unpacked by `/usr/bin/jevois.sh` (source `~/jevois/bin/jevois.sh`) running on the
  platform when it boots up.

Module documentation and metadata
---------------------------------

A really nasty perl script, \c /usr/bin/jevois-modinfo (source in \c ~/jevois/scripts/jevois-modinfo), will parse your
module to generate a single-page documentation for it. This script is a mess and its operation is quite brittle. It is
invoked automatically when you compile your module (see rules in \b ~/jevois/CMakeModules/JeVois.cmake).

The script creates modinfo.html (and modinfo.yaml, currently not used) by parsing your modules and other files in its
directory.

Special doxygen tags in your module's doc will be parsed, here are some examples:

- @@author Sample Author
- @@displayname My Algo (only needed if you want to display a different name than the class name)
- @@videomapping YUYV 640 480 28.5 YUYV 640 480 28.5 SampleVendor SampleModule
- @@modulecommand mycommand - description of the module-specific command
- @@youtubevideo AbcDe567 - link to a youtube video, will be shown in the doc along with the screenshots
- @@email sampleemail\@samplecompany.com
- @@address 123 First Street, Los Angeles, CA 90012
- @@copyright Copyright (C) 2017 by Sample Author
- @@mainurl http://samplecompany.com
- @@supporturl http://samplecompany.com/support
- @@otherurl http://samplecompany.com/about
- @@license GPL v3
- @@distribution Unrestricted
- @@restrictions None

Specially named files will also be used if present:

- \b icon.png (or any other extension, like .jpg, etc): an icon for your module.

- \b screenshot*.*: screenshots, will appear in the doc in the same order as \c ls lists them.

- \b video*.*: demo videos, will appear in the doc in the same order as \c ls lists them.

- \b postinstall: a script that will be executed after your module is unpacked. You may use command
  `jevois-add-videomapping` (installed in <b>/usr/bin/</b>, source in <b>~/jevois/src/Apps/</b>) in this script to add
  to the \b videomappings.cfg file any videomappings that should be installed when your module is installed.  This
  usually is a subset of all the mappings listed in the doc using the doxygen tags.

- \b params.cfg: parameters values that should get set when the module is loaded. These are set before the
  module is initialized.

- \b script.cfg: script of jevois comand-line interface commands that should be run when the module is loaded. This is
  run after the module is initialized.

- \b jvpkg-exclude.cfg: list of files that should not be included into the jvpkg package. Same format as in
  `tar --exclude-from`

Partial compilation
-------------------

The scripts \c rebuild-host.sh and \c rebuild-platform.sh clear and recompile everything.

You should run them at least once.

Then, if you are just changing a few files, you can only recompile what is needed, as follows:

- for host:
\verbatim
cd hbuild
make -j
sudo make install
\endverbatim

- for platform
\verbatim
cd pbuild
make -j
make install
make jvpkg
\endverbatim


Writing new modules: A collection with shared components
========================================================

In this more complex scenario, you wish to create a collection of modules, and some component algorithms will be shared
by several modules.

The preferred approach is then to write the shared algorithms as jevois Component objects, and to compile them all
into a shared library (.so). Each module that uses some of the components will then automatically trigger the loading of
the shared library. This is the approach taken in \b jevoisbase

For guidance on this, inspect the \b CMakeLists.txt in \b jevoisbase.

Note how several CMake macros have been defined to assist you; those are in \b jevois/CMakeModules/JeVois.cmake

In jevoisbase, we compile everything that is under \b src/Components into \b libjevoisbase.so

Then, we compile each module under \b src/Modules into one \b .so file each, which is marked as depending upon
\b libjevoisbase.so

To create your own, roughly the first 50 lines of the \b jevoisbase \b CMakeLists.txt should be preserved and modified
for your project. The rest of the \b jevoisbase \b CMakeLists.txt is basically to add required dependencies, such as on
the ZBar library, the OpenCV library, etc and those will vary with your specific project.

Make sure you keep the call to \c jevois_project_finalize() at the nd of your \b CMakeLists.txt file.
*/
