/*! \page ProgrammerSDK 程序员 SDK 和编写新模块

JeVois 程序员软件开发工具包 (SDK) 允许您为 JeVois 创建自己的机器视觉模块。SDK 非常复杂，因为它不仅包含 JeVois 核心软件，还包含 JeVois 相机的自定义 Linux 内核，以及 JeVois 相机内运行的完整 Linux 操作系统和实用程序集。

开始使用 JeVois 程序员 SDK 
==================================================

要开始使用程序员 SDK，可以安装预编译的 deb 包，也可以从源代码构建，详情请参阅 \ref ProgrammerSource

编写新模块：单个独立模块 
===================================================

已在 \b /usr/bin 中创建脚本 \c jevois-create-module （源位于 \b ~/jevois/scripts/ ）以自动执行创建新模块的过程。它基本上克隆了 https://github.com/jevois/samplemodule 并将其中的一些名称更改为您提供的新名称：

\verbatim
# USAGE: jevois-create-module <VendorName> <ModuleName>
# 创建一个名为 tolower（ModuleName）的项目目录并填充它：

jevois-create-module MyVendor MyAlgo

# Module is setup in myalgo/
\endverbatim

现在编辑您的模块以实际做一些有趣的事情，并更新模块内联文档中的所有自定义 doxygen 标签，例如 @@videomapping 等等（有关自定义 doxygen 标签的更多信息请参阅下文）。

还请检查 \b icon.png 和源代码所在目录中的其他文件，并根据需要更新它们。

然后你可以使用

\verbatim
./rebuild-host.sh
./rebuild-platform.sh
./rebuild-pro-host.sh
./rebuild-pro-platform-pdeb.sh
\endverbatim

就像你对 jevois 和 jevoisbase 所做的那样。

\note 如果您收到错误  <b>cc1plus: fatal error: jevois/Config/Config.H: No such file or directory</b>，只需在您的 \b jevois 存储库中运行 \c rebuild-platform.sh 。请参阅 \ref CompilingJeVois

JeVois-Pro：在相机上安装模块 
------------------------------------------------

运行 `./rebuild-pro-platform-pdeb.sh` 后，将在 ppdbuild/ 中创建一个 .deb 文件

- 将其复制到您的 microSD。

- 使用其中的 microSD 启动相机。

- 在 JeVois-Pro 控制台中，输入 `shell dpkg -i /path/to/your-module-package.deb`。如果您已经安装了以前的版本，请先运行 `shell dpkg -r your-module-package` 以将其删除。

- 在 Config 选项卡中，编辑 videomappings.cfg 以添加模块的新映射。保存文件。

- 您的模块现在应该出现在可用模块菜单下，您可以选择它并运行它。

JeVois-A33：将您的模块添加到 microSD 卡：jvpkg 
-------------------------------------------------------

\c rebuild-platform.sh 创建了一个 JeVois 包文件（它只是一个 zip）：

\verbatim
myalgo/MyVendor_MyAlgo.jvpkg
\endverbatim

将正确安装的 JeVois MicroSD（按照 [JeVois Start](http://jevois.org/start) 中的步骤从磁盘映像制作一个）插入您的计算机，然后将 .jvpkg 文件复制到您的 microSD 的 JEVOIS:/packages/ 目录中。

您的智能相机将在下次启动时解压、配置并删除.jvpkg 文件。

确保留出足够的时间来完成这项工作。这可能需要几分钟（取决于模块的文件大小、microSD 卡速度等）。

还要记住编辑 microSD 的 JEVOIS 分区中的 config/videomappings.cfg，以添加将使用您的模块的新映射。

了解更多信息：

- jvpkg 软件包由 `/usr/bin/jevois-jvpkg`（源在 `~/jevois/scripts/jevois-jvpkg`）创建，由 `make jvpkg` 调用
- 并在平台启动时由运行的 `/usr/bin/jevois.sh`（源在 `~/jevois/bin/jevois.sh`）解压。

模块文档和元数据 
=====================================

一个非常讨厌的 perl 脚本 \c /usr/bin/jevois-modinfo （源代码位于 \c ~/jevois/scripts/jevois-modinfo ）将解析您的模块并为其生成单页文档。这个脚本很乱，而且操作相当脆弱。它会在您编译模块时自动调用（请参阅 \b ~/jevois/CMakeModules/JeVois.cmake 中的规则）。

该脚本通过解析其目录中的模块和其他文件来创建 modinfo.html（和 modinfo.yaml，当前未使用）。

模块文档中的特殊 doxygen 标签将被解析，以下是一些示例：

- @@author 示例作者
- @@displayname My Algo（仅当您想显示与类名不同的名称时才需要）
- @@videomapping YUYV 640 480 28.5 YUYV 640 480 28.5 SampleVendor SampleModule
- @@modulecommand mycommand - 模块特定命令的描述
- @@youtubevideo AbcDe567 - 指向 YouTube 视频的链接，将与屏幕截图一起显示在文档中
- @@email sampleemail\@samplecompany.com
- @@address 123 First Street, Los Angeles, CA 90012
- @@copyright 版权所有 (C) 2017 by Sample Author
- @@mainurl http://samplecompany.com
- @@supporturl http://samplecompany.com/support
- @@otherurl http://samplecompany.com/about
- @@license GPL v3
- @@distribution 不受限制
- @@restrictions 无

如果存在特殊命名的文件，也将使用它：

- \b icon.png （或任何其他扩展名，如 .jpg 等）：模块的图标。

- \b screenshot*.* ：屏幕截图，将按照 \c ls 列出的顺序出现在文档中。

- \b video*.* ：演示视频，将按照 \c ls 列出的顺序出现在文档中。

- \b postinstall ：模块解压后将执行的脚本。您可以在此脚本中使用该命令`jevois-add-videomapping` （安装在 <b>/usr/bin/</b> 中，源位于 <b>~/jevois/src/Apps/</b> 中）将模块安装时应安装的任何视频映射添加到 \b videomappings.cfg 文件中。这通常是使用 doxygen 标签在文档中列出的所有映射的子集。

- \b params.cfg ：模块加载时应设置的参数值。这些是在模块初始化之前设置的。

- \b script.cfg ：jevois 命令行界面命令脚本，应在模块加载时运行。此脚本在模块初始化后运行。

- \b jvpkg-exclude.cfg ：不应包含在 jvpkg 包中的文件列表。格式与 `tar --exclude-from` 相同

部分编译 
=====================

脚本 \c rebuild-host.sh 和 \c rebuild-platform.sh 清除并重新编译所有内容。

您应该至少运行它们一次。

然后，如果您只是更改几个文件，那么您只需重新编译所需的文件即可，如下所示：

- \jva33: for host
\verbatim
cd hbuild
make -j
sudo make install
\endverbatim

- \jva33: for platform
\verbatim
cd pbuild
make -j
sudo make install
make jvpkg
\endverbatim

- \jvpro: for host
\verbatim
cd phbuild
make -j
sudo make install
make doc     # optional; if desired
\endverbatim

- \jvpro: for platform
\verbatim
cd ppdbuild
make -j
sudo make install
sudo cpack # will re-generate the deb package into ppdbuild/
\endverbatim


编写新模块：具有共享组件的集合
==========================================================

在这种更复杂的场景中，您希望创建一个模块集合，并且一些组件算法将由几个模块共享。

然后，首选方法是将共享算法编写为 jevois 组件对象，并将它们全部编译成共享库 (.so)。然后，使用某些组件的每个模块都会自动触发共享库的加载。这是 \b jevoisbase 中采用的方法

有关这方面的指导，请检查 \b jevoisbase 中的 \b CMakeLists.txt。

请注意，已定义了几个 CMake 宏来帮助您；它们位于 \b jevois/CMakeModules/JeVois.cmake 中

在 jevoisbase 中，我们将 \b src/Components 下的所有内容编译为 \b libjevoisbase.so

然后，我们将 \b src/Modules 下的每个模块编译成一个 \b .so 文件，该文件被标记为依赖于 \b libjevoisbase.so

要创建自己的 \b jevoisbase \b CMakeLists.txt ，大约需要保留并修改 \b jevoisbase \b CMakeLists.txt 的前 50 行以适应您的项目。\b jevoisbase \b CMakeLists.txt 的其余部分基本上是添加所需的依赖项，例如 ZBar 库、OpenCV 库等，这些将因您的特定项目而异。

*/

