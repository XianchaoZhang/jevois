/*! \page ModuleTips 编写机器视觉模块的技巧

// #################################################################################################### 
\section moduletipsexceptions 处理异常

JeVois 框架完全支持使用异常。我们相信这提供了更易读的代码，其中主要流程是预期可以工作的流程。这与 Linux 内核等形成了鲜明对比，后者只是一大堆 \c if 语句来检查某些操作是否成功。

因此，在 Module process() 函数中，如果出现任何问题，正确的做法是抛出异常。Engine 将捕获异常，进行清理并继续处理下一个视频帧，希望能够取得更好的结果。

我们建议抛出 \c std::runtime_error ，因为这将向用户提供更详细的消息（错误消息将显示异常的 \c what() 字符串）。

为了实现异常安全并避免内存泄漏，最简单（也可能是最好的）的方法是始终使用动态分配内存的异常安全包装器。最常见的是 \c std::shared_ptr ，当没有人再引用它时，它将自动释放分配的内存。

因此，而不是：

\code
void process(jevois::InputFrame && inframe)
{
  char * tmpdata = new char[100];

  do_something_that_could_throw();

  delete [] tmpdata;
}
\endcode


如果发生异常，则会泄漏 \c tmpdata 内存，只需使用：

\code
void process(jevois::InputFrame && inframe)
{
  std::shared_ptr<char> tmpdata(new char[100]);

  do_something_that_could_throw();
}
\endcode


\c shared_ptr 会在超出范围时自动释放内存（因为 \c process() 函数正常结束，或者因为发生异常）。您也可以只使用 \c std::string 或 \c std::vector 作为 \c tmpdata ，因为它们会在超出范围时释放内存（包括因为引发异常）。\c std::unique_ptr 也适用于此。


// #################################################################################################### 
\section moduletipscoords 坐标

JeVois 可以处理各种视频分辨率的图像。如果它检测到帧中的某个物体并想将其坐标传达给 Arduino，那么就会出现使用哪种分辨率以及如何让 Arduino 知道的问题。

例如，如果算法处理 640x480 的视频，那么在坐标 320,240 处检测到的物体位于视野的中心。但如果相机在 320x240 处抓取，那么坐标 320,240 就在视野的右下角。仅仅让 Arduino 知道在 320,240 处检测到了某物可能会造成混淆。

我们不需要让 Arduino 来支持多种摄像头分辨率，而是在 JeVois 中提供一个标准化的坐标系：

参见 \ref coordhelpers

使用 imgToStd() 将图像坐标转换为标准坐标。

相反地​​使用 stdToImg()。

*/

