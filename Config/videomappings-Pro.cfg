#JVUI 0 0 30.0 CropScale=RGB24@640x360:YUYV 1920 1080 30.0 JeVois NPUclassify
#JVUI 0 0 30.0 CropScale=RGB24@640x360:YUYV 1920 1080 30.0 JeVois NPUDetect

######################################################################################################################
#
# JeVois Smart Embedded Machine Vision Toolkit - Copyright (C) 2016 by Laurent Itti, the University of Southern
# California (USC), and iLab at USC. See http://iLab.usc.edu and http://jevois.org for information about this project.
#
# This file is part of the JeVois Smart Embedded Machine Vision Toolkit.  This program is free software; you can
# redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software
# Foundation, version 2.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.  You should have received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# Contact information: Laurent Itti - 3641 Watt Way, HNB-07A - Los Angeles, CA 90089-2520 - USA.
# Tel: +1 213 740 3527 - itti@pollux.usc.edu - http://iLab.usc.edu - http://jevois.org
######################################################################################################################
#
# JeVois smart camera operation modes and video mappings
#
# Format is: <USBmode> <USBwidth> <USBheight> <USBfps> <CAMmode> <CAMwidth> <CAMheight> <CAMfps> <Vendor> <Module> [*]
#
# CamMode can be only one of: YUYV, BAYER16, RGB24, GREY, RGB32, YUV444
# USBmode can be only one of: YUYV, GREY, MJPG, BAYER, RGB565, BGR24, NONE

# USBwidth and USBheight can either be absolute values, or relative to CAMwidth and CAMheight when prefixed by + or -
# symbols.

# CAMmode supports the following colon-separated optional prefixes: Linear (for regular single-exposure capture;
# default), DOL (for digital overlap dual-exposure wide dynamic range), Crop (to crop native camera frame to desired
# dims; default), Scale (to rescale the camera frame from its native dims to the specified dims, possibly affecting the
# pixel aspect ratio).

# USB to camera mode mappings (when USBmode is not NONE) are organized according to output format, which should be
# unique (no two entries in this file should have same USBmode/USBwidth/USBheight/USBfps). Indeed, these modes can only
# be selected by the host computer's video grabbing software, and they are selected by picking an output format in that
# software. These modes cannot be chosen by the JeVois system itself. For these modes, the Module's process(inframe,
# outframe) function will be called on every frame. Beware that Macs will not accept modes for which USBwidth is not a
# multiple of 16.

# Camera-only modes (when USBmode is NONE) mode mappings have no video output over USB, and are selected by interacting
# with the JeVois hardware over serial ports. When USBmode is NONE, USBwidth, USBHeight, and USBfps are ignored and
# should be set to 0 here. For these modes, the Module's process(inframe) function will be called on every frame. These
# modes are usually the ones you would use when interfacing the JeVois camera to an Arduino or similar system that
# cannot stream video over USB and will just receive data from the JeVois camera over a serial port.

# The optional * at the end of one line indicates the format that should be the default one announced by the device to
# the USB host. This is the one that most webcam programs will select by default when you start them. Note that the
# guvcview program on linux seems to ignore this and to instead select the last mode you had selected the last time you
# used the camera. This * cannot be on a mapping that has NONE USBmode. There should be only one * in the whole file.

# Model JeVois-Pro camera sensor IMX290 supported resolutions and frame rates:
#
# 1080p (1920 x 1080): up to 120 fps (native)
# any resolution smaller than that through crop (default) or rescaling (see CamMode above).

# Frame rates can be set to any value from 0.1fps to the maximum supported for the selected resolution. This is very
# useful to avoid dropping frames. For example if you have an algorithm that runs at 26.3fps after all possible
# optimizations, you can set the camera (and usb) frame rate to 26.3 and you will not drop frames (unless your algorithm
# momentarily performs slower, hence adding a small margin may be a good idea, e.g., select 26.1fps camera and usb
# rates). This is better than setting the frame rate to 30.0 as this would mean that every so often you would miss the
# next camera frame and then have to wait for the next one to be captured. If your algorithm really runs at 26.3fps but
# you specify 30.0fps camera frame rate, then the frames will actually end up being pumped to USB at only 15.0fps (i.e.,
# by the time you finish processing the current frame, you have missed the next one from the camera, and you need to
# wait for the following one).

# Note on USB transfer rate: the maximum actual pixel data transfer rate is 3070*8000 = 23.9 Mbytes/s (which is 3kb/USB
# microframe, max "high bandwidth" setting). Although USB 2.0 has a maximum theoretical rate of 480 Mbit/s, this
# includes protocol overhead and not all of the bandwidth is available for isochronous (real-time stream) transfers,
# which we use.  This means that SXGA YUYV (2 bytes/pixel) can only transfer at a max rate of ~9.3 fps over the USB
# link, although the camera can grab SXGA YUYV at 15 fps. SXGA in Bayer can achieve 15 fps transfer over USB since it
# only uses 1 byte/pixel.

####################################################################################################
### JeVois-Pro DNN (Deep Neural Networks) module
####################################################################################################

JVUI 0 0 30.0 CropScale=RGB24@1024x576:YUYV 1920 1080 30.0 JeVois DNN *
#JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois DNN
JVUI 0 0 30.0 YUYV 640 480 30.0 JeVois DNN
YUYV 640 480 30.0 YUYV 640 480 30.0 JeVois DNN

####################################################################################################
### JeVois-Pro MultiDNN (Deep Neural Networks) module
####################################################################################################

#JVUI 0 0 30.0 CropScale=RGB24@1024x576:YUYV 1920 1080 30.0 JeVois MultiDNN
JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois MultiDNN
#JVUI 0 0 30.0 YUYV 640 480 30.0 JeVois MultiDNN

####################################################################################################
### JeVois-Pro MediaPipe in Python
####################################################################################################

JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois PyHandDetector
JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois PyFaceMesh
JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois PyPoseDetector

# These do not work in mediapipe 0.8.4, and compiling mediapipe 0.8.10 from source leads to very slow prformance
# Will need to revisit when a later version of mediapipe is released.
#JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois PySelfie
#JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois PyObjectron

####################################################################################################
### JeVois-Pro MultiDNN2 (Deep Neural Networks) module
####################################################################################################

#JVUI 0 0 30.0 CropScale=RGB24@1024x576:YUYV 1920 1080 30.0 JeVois MultiDNN2
JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois MultiDNN2
#JVUI 0 0 30.0 YUYV 640 480 30.0 JeVois MultiDNN2

####################################################################################################
### Pass-through and simple pixel format conversion modes:
####################################################################################################

GREY +0 +0 30.0 Scale:GREY 1280 720 30.0 JeVois PassThrough
JVUI 0 0 30.0 CropScale=GREY@512x288:YUYV 1920 1080 30.0 JeVois PassThrough
JVUI 0 0 60.0 CropScale=GREY@512x288:YUYV 1920 1080 60.0 JeVois PassThrough
JVUI 0 0 30.0 CropScale=GREY@1024x576:YUYV 3840 2160 30.0 JeVois PassThrough # OS08A10 4K

####################################################################################################
### Save video to disk, no preview over USB
####################################################################################################

#JVUI 0 0 30.0 YUYV 640 480 30.0 JeVois SaveVideo
JVUI 0 0 30.0 RGB24 1920 1080 30.0 JeVois SaveVideo
#YUYV +0 +0 30.0 Crop:YUYV 800 600 30.0 JeVois SaveVideo
NONE 0 0 0 YUYV 320 240 60.0 JeVois SaveVideo

####################################################################################################
### Demo: Saliency + gist + face detection + object recognition
####################################################################################################

# fixme: crashes on jevois-pro
#YUYV 640 312 50.0 YUYV 320 240 50.0 JeVois DemoSalGistFaceObj

####################################################################################################
### Demo: JeVois intro movie, then Saliency + gist + face detection + object recognition
####################################################################################################

# fixme: crashes on jevois-pro
#YUYV 640 360 30.0 YUYV 320 240 30.0 JeVois JeVoisIntro

####################################################################################################
### Demo: Saliency and gist
####################################################################################################

# fixme: crashes on jevois-pro
#YUYV 1280 600 30.0 YUYV 640 480 30.0 JeVois DemoSaliency

####################################################################################################
### Production: Saliency and gist
####################################################################################################

# saliency + feature maps + gist
#GREY 120 25 60.0 YUYV 320 240 60.0 JeVois SaliencyGist

# saliency + feature maps
#GREY 120 15 60.0 YUYV 320 240 60.0 JeVois SaliencyGist

# saliency + gist
#GREY 20 73 60.0 YUYV 320 240 60.0 JeVois SaliencyGist

# saliency only
#GREY 20 15 60.0 YUYV 320 240 60.0 JeVois SaliencyGist

# gist only
#GREY 72 16 60.0 YUYV 320 240 60.0 JeVois SaliencyGist

####################################################################################################
### Demo: Background subtraction
####################################################################################################

YUYV 640 240 15.0 YUYV 320 240 15.0 JeVois DemoBackgroundSubtract
JVUI 0 0 30.0 CropScale=RGB24@1024x576:YUYV 1920 1080 30.0 JeVois DemoBackgroundSubtract

####################################################################################################
### Demo: QR-code and barcode detection and decoding
####################################################################################################

YUYV +0 +46 30.0 YUYV 640 480 30.0 JeVois DemoQRcode
JVUI 0 0 30.0 CropScale=GREY@1024x576:YUYV 1920 1080 30.0 JeVois DemoQRcode

####################################################################################################
### Road following using vanishing point
####################################################################################################

NONE 0 0 0 YUYV 320 240 30.0 JeVois RoadNavigation
#NONE 0 0 0 YUYV 176 144 120.0 JeVois RoadNavigation
YUYV 320 256 30.0 YUYV 320 240 30.0 JeVois RoadNavigation
#YUYV 176 160 120.0 YUYV 176 144 120.0 JeVois RoadNavigation

####################################################################################################
### Demo of ARM-Neon SIMD image processing
####################################################################################################

YUYV 960 240 30.0 YUYV 320 240 30.0 JeVois DemoNeon

####################################################################################################
### Dense SIFT using VLfeat library
####################################################################################################

# very slow, min keypoint step is 17
#YUYV 448 240 5.0 YUYV 320 240 5.0 JeVois DenseSift

# slow too, min keypoint step is 11
#YUYV 288 120 5.0 YUYV 160 120 5.0 JeVois DenseSift

# raw keypoints only, assuming step=11, binsize=8
#GREY 128 117 5.0 YUYV 160 120 5.0 JeVois DenseSift

####################################################################################################
### Salient regions
####################################################################################################

YUYV 64 192 25.0 YUYV 320 240 25.0 JeVois SalientRegions
#YUYV 100 400 10.0 YUYV 640 480 10.0 JeVois SalientRegions

####################################################################################################
### Superpixel image segmentation/clustering
####################################################################################################

GREY 320 240 10.0 YUYV 320 240 10.0 JeVois SuperPixelSeg

####################################################################################################
### Eye tracking using the openEyes toolkit
####################################################################################################

# Note: this code has been obsoleted with OpenCV 4.x as the core algo relies on an OpenCV API that is too old.

#GREY 640 480 30.0 YUYV 640 480 30.0 JeVois DemoEyeTracker
#GREY 320 240 60.0 YUYV 320 240 60.0 JeVois DemoEyeTracker
#GREY 176 144 120.0 YUYV 176 144 120.0 JeVois DemoEyeTracker

####################################################################################################
### Demo: ArUco augmented-reality markers detection and decoding
####################################################################################################

NONE 0 0 0.0 YUYV 320 240 30.0 JeVois DemoArUco
JVUI 0 0 30.0 CropScale=GREY@1280x720:YUYV 1920 1080 30.0 JeVois DemoArUco
YUYV 640 500 20.0 YUYV 640 480 20.0 JeVois DemoArUco
JVUI 0 0 30.0 GREY 3840 2160 30.0 JeVois DemoArUco # OS08A10 4K greyscalea

####################################################################################################
### Edge detection using Canny
####################################################################################################

JVUI 0 0 30.0 YUYV 640 480 30.0 JeVois EdgeDetection
JVUI 0 0 30.0 CropScale=GREY@1920x1080:YUYV 1920 1080 30.0 JeVois EdgeDetection

####################################################################################################
### Edge detection using 4 Canny filters in parallel, with different settings
####################################################################################################

#GREY 320 960 45.0 YUYV 320 240 45.0 JeVois EdgeDetectionX4

####################################################################################################
### Color-based object tracker
####################################################################################################

NONE 0 0 0.0 YUYV 320 240 60.0 JeVois ObjectTracker
YUYV +0 +14 30.0 YUYV 640 480 30.0 JeVois ObjectTracker

####################################################################################################
### GPU color image processing demo
####################################################################################################

# Native output RGB565 disabled by default as otherwise MacOS refuses to register the JeVois camera:
#RGB565 320 240 22.0 YUYV 320 240 22.0 JeVois DemoGPU

# Variant with conversion from RGB565 to YUYV, which is done on the JeVois CPU:
#YUYV 320 240 22.0 YUYV 320 240 22.0 JeVois DemoGPU

####################################################################################################
### Combo CPU multithreaded saliency/gist + 4x GPU grayscale image processing demo
####################################################################################################

#GREY 160 495 60.0 YUYV 160 120 60.0 JeVois DemoCPUGPU

####################################################################################################
### Fast optical flow computation
####################################################################################################

GREY 640 960 30.0 YUYV 640 480 30.0 JeVois OpticalFlow

####################################################################################################
### Object detection using SURF keypoints
####################################################################################################

YUYV +0 +12 30.0 YUYV 640 480 30.0 JeVois ObjectDetect

####################################################################################################
### Salient region detection and identification using SURF keypoints
####################################################################################################

YUYV +0 +48 30.0 YUYV 640 480 30.0 JeVois SaliencySURF

####################################################################################################
### CPU + GPU + NEON burn test
####################################################################################################

#YUYV 640 300 10.0 YUYV 320 240 10.0 JeVois BurnTest

####################################################################################################
### Python tests
####################################################################################################

YUYV 640 480 15.0 YUYV 640 480 15.0 JeVois PythonTest
GREY 640 480 20.0 YUYV 640 480 20.0 JeVois PythonOpenCV
YUYV 512 288 30.0 YUYV 512 288 30.0 JeVois PythonSandbox

JVUI 0 0 30.0 YUYV 640 480 30.0 JeVois PythonSandbox
JVUI 0 0 30.0 CropScale=RGB24@1024x576:YUYV 1920 1080 30.0 JeVois PythonTest
NONE 0 0 30.0 RGB24 1920 1080 30.0 JeVois PythonSandbox # JeVois-Pro 1080p 30fps RGB headless
NONE 0 0 60.0 RGB24 1920 1080 60.0 JeVois PythonSandbox # JeVois-Pro 1080p 60fps RGB headless
NONE 0 0 120.0 RGB24 1920 1080 120.0 JeVois PythonSandbox # JeVois-Pro 1080p 120fps RGB headless
NONE 0 0 30.0 RGB24 1920 1200 30.0 JeVois PythonSandbox # JeVois-Pro AR0234 1200p 30fps RGB headless
NONE 0 0 60.0 RGB24 1920 1200 60.0 JeVois PythonSandbox # JeVois-Pro AR0234 1200p 60fps RGB headless
NONE 0 0 120.0 RGB24 1920 1200 120.0 JeVois PythonSandbox # JeVois-Pro AR0234 1200p 120fps RGB headless

####################################################################################################
### Image color filtering
####################################################################################################

YUYV 1280 480 30.0 YUYV 640 480 30.0 JeVois ColorFiltering
JVUI 0 0 30.0 CropScale=RGB24@1024x576:YUYV 1920 1080 30.0 JeVois ColorFiltering
JVUI 0 0 60.0 CropScale=RGB24@1024x576:YUYV 1920 1080 60.0 JeVois ColorFiltering
JVUI 0 0 30.0 CropScale=RGB24@1024x640:YUYV 1920 1200 30.0 JeVois ColorFiltering # AR0234 1200p
#JVUI 0 0 30.0 RGB24 1920 1080 30.0 JeVois ColorFiltering

####################################################################################################
### Dice counting tutorial
####################################################################################################

YUYV 640 480 7.5 YUYV 640 480 7.5 JeVois DiceCounter

####################################################################################################
### Augmented reality markers with ARtoolkit
####################################################################################################

NONE 0 0 0 YUYV 640 480 30.0 JeVois DemoARtoolkit
JVUI 0 0 30.0 CropScale=GREY@1280x720:YUYV 1920 1080 30.0 JeVois DemoARtoolkit

####################################################################################################
### Augmented reality markers with ARtoolkit, ArUco, and QR-Code
####################################################################################################

YUYV +0 +66 20.0 YUYV 640 480 20.0 JeVois MarkersCombo
JVUI 0 0 30.0 CropScale=GREY@1024x576:YUYV 1920 1080 30.0 JeVois MarkersCombo

####################################################################################################
### Detect objects in scenes using darknet YOLO deep neural network
####################################################################################################

YUYV 1280 480 15.0 YUYV 640 480 15.0 JeVois DarknetYOLO

####################################################################################################
### Detect objects in scenes using darknet deep neural network
####################################################################################################

YUYV 544 240 15.0 YUYV 320 240 15.0 JeVois DarknetSingle
#YUYV 448 240 15.0 YUYV 320 240 15.0 JeVois DarknetSingle
#YUYV 864 480 15.0 YUYV 640 480 15.0 JeVois DarknetSingle
#YUYV 1088 480 15.0 YUYV 640 480 15.0 JeVois DarknetSingle

####################################################################################################
### Detect salient objects in scenes using saliency + darknet deep neural network
####################################################################################################

#YUYV 460 240 15.0 YUYV 320 240 15.0 JeVois DarknetSaliency # not for mac (width not multiple of 16)
#YUYV 560 240 15.0 YUYV 320 240 15.0 JeVois DarknetSaliency
YUYV 880 480 10.0 YUYV 640 480 10.0 JeVois DarknetSaliency

####################################################################################################
### FIRST robotics object detection example in C++
####################################################################################################

#YUYV 352 194 120.0 YUYV 176 144 120.0 JeVois FirstVision
#YUYV 176 194 120.0 YUYV 176 144 120.0 JeVois FirstVision
YUYV 640 290 60.0 YUYV 320 240 60.0 JeVois FirstVision
YUYV 320 290 60.0 YUYV 320 240 60.0 JeVois FirstVision
NONE 0 0 0.0 YUYV 320 240 60.0 JeVois FirstVision
NONE 0 0 0.0 YUYV 176 144 120.0 JeVois FirstVision

####################################################################################################
### FIRST robotics object detection example in Python
####################################################################################################

YUYV 640 252 60.0 YUYV 320 240 60.0 JeVois FirstPython
#YUYV 320 252 60.0 YUYV 320 240 60.0 JeVois FirstPython
NONE 0 0 0.0 YUYV 320 240 60.0 JeVois FirstPython
NONE 0 0 0.0 YUYV 176 144 120.0 JeVois FirstPython

####################################################################################################
### Object detection using SURF and 6D pose estimation
####################################################################################################

YUYV 320 262 15.0 YUYV 320 240 15.0 JeVois PythonObject6D
#YUYV 640 502 10.0 YUYV 640 480 10.0 JeVois PythonObject6D
NONE 0 0 0.0 YUYV 320 240 15.0 JeVois PythonObject6D

####################################################################################################
### Edge detection using 4 Canny filters in parallel, with different settings, example python parallel
####################################################################################################

# Disabled by default because Python multiprocessing is very buggy. Note that enabling this mapping may also
# render your JeVois camera undetectable by OSX hosts.

#YUYV 1280 240 30.0 YUYV 320 240 30.0 JeVois PythonParallel

####################################################################################################
### Detect objects in scenes using tensorflow deep neural network
####################################################################################################

#YUYV 560 240 15.0 YUYV 320 240 15.0 JeVois TensorFlowSingle
YUYV 464 240 15.0 YUYV 320 240 15.0 JeVois TensorFlowSingle
#YUYV 880 480 15.0 YUYV 640 480 15.0 JeVois TensorFlowSingle
#YUYV 1104 480 15.0 YUYV 640 480 15.0 JeVois TensorFlowSingle

####################################################################################################
### Detect salient objects in scenes using saliency + tensorflow deep neural network
####################################################################################################

#YUYV 448 240 30.0 YUYV 320 240 30.0 JeVois TensorFlowSaliency
YUYV 512 240 30.0 YUYV 320 240 30.0 JeVois TensorFlowSaliency
#YUYV 544 240 30.0 YUYV 320 240 30.0 JeVois TensorFlowSaliency

####################################################################################################
### Detect objects in scenes using tensorflow deep neural network, easy version
####################################################################################################

YUYV 320 308 30.0 YUYV 320 240 30.0 JeVois TensorFlowEasy
#YUYV 640 548 30.0 YUYV 640 480 30.0 JeVois TensorFlowEasy
#YUYV 1280 1092 7.0 YUYV 1280 1024 7.0 JeVois TensorFlowEasy

####################################################################################################
### ArUco augmented-reality markers detection and decoding + color blob detection
####################################################################################################

YUYV 320 266 30.0 YUYV 320 240 30.0 JeVois ArUcoBlob

####################################################################################################
### Detect and identify objects in scenes using OpenCV DNN detection framework
####################################################################################################

YUYV 640 502 20.0 YUYV 640 480 20.0 JeVois PyDetectionDNN
YUYV 640 498 15.0 YUYV 640 480 15.0 JeVois DetectionDNN

####################################################################################################
### Simple demos of the ICM-20948 IMU
####################################################################################################

YUYV +0 +32 30.0 YUYV 640 480 30.0 JeVois DemoIMU
YUYV +0 +32 30.0 YUYV 1920 1048 30.0 JeVois DemoIMU
YUYV +0 +40 25.0 YUYV 640 480 25.0 JeVois DemoDMP
JVUI 0 0 30.0 YUYV 1920 1080 30.0 JeVois DemoIMU

####################################################################################################
### Object classification using OpenCV DNN in Python
####################################################################################################

YUYV 320 264 30.0 YUYV 320 240 30.0 JeVois PyClassificationDNN

####################################################################################################
### Object classification using Coral Edge TPU in Python
####################################################################################################

YUYV +0 +24 30.0 YUYV 1024 576 30.0 JeVois PyCoralClassify
YUYV +0 +0 30.0 YUYV 1024 576 30.0 JeVois PyCoralDetect
YUYV 1024 512 30.0 Crop:RGB24 512 512 30.0 JeVois PyCoralSegment

JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois PyCoralDetect
JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois PyCoralClassify
JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois PyCoralSegment

####################################################################################################
### Human face emotion classification using OpenCV DNN in Python
####################################################################################################

YUYV 320 336 15.0 YUYV 320 240 15.0 JeVois PyEmotion

####################################################################################################
### Detect DataMatrix (DMTX) 2D barcodes
####################################################################################################

# This algorithm is very slow, about 0.2fps, so disabled by default.

#YUYV 320 280 30.0 YUYV 320 240 30.0 JeVois PyDMTX

####################################################################################################
### JeVois-Pro license plate detection Python NPU TIM-VX
####################################################################################################

#JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois PyLicensePlate # 5fps
JVUI 0 0 30.0 CropScale=RGB24@256x144:YUYV 1920 1080 30.0 JeVois PyLicensePlate

####################################################################################################
### JeVois-Pro scene text Python NPU TIM-VX
####################################################################################################

# diabled because too slow and trashy...
#JVUI 0 0 30.0 CropScale=RGB24@512x288:YUYV 1920 1080 30.0 JeVois PySceneText

####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
# Modules provided by jevoisextra
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################

### Dlib face detector
YUYV 320 264 15.0 YUYV 320 240 15.0 JeVois FaceDetector

### Detect objects in scenes using darknet YOLO Light (INT8, XNOR) deep neural network
YUYV 1280 480 12.0 YUYV 640 480 12.0 JeVois YoloLight
